module cxxboost_algorithm [system] {
	header "boost/algorithm/minmax_element.hpp"
	header "boost/algorithm/find_backward.hpp"
	header "boost/algorithm/cxx17/transform_exclusive_scan.hpp"
	header "boost/algorithm/cxx17/for_each_n.hpp"
	header "boost/algorithm/cxx17/reduce.hpp"
	header "boost/algorithm/cxx17/transform_reduce.hpp"
	header "boost/algorithm/cxx17/transform_inclusive_scan.hpp"
	header "boost/algorithm/cxx17/exclusive_scan.hpp"
	header "boost/algorithm/cxx17/inclusive_scan.hpp"
	header "boost/algorithm/cxx11/any_of.hpp"
	header "boost/algorithm/cxx11/find_if_not.hpp"
	header "boost/algorithm/cxx11/is_sorted.hpp"
	header "boost/algorithm/cxx11/copy_if.hpp"
	header "boost/algorithm/cxx11/is_partitioned.hpp"
	header "boost/algorithm/cxx11/one_of.hpp"
	header "boost/algorithm/cxx11/partition_copy.hpp"
	header "boost/algorithm/cxx11/iota.hpp"
	header "boost/algorithm/cxx11/is_permutation.hpp"
	header "boost/algorithm/cxx11/copy_n.hpp"
	header "boost/algorithm/cxx11/none_of.hpp"
	header "boost/algorithm/cxx11/all_of.hpp"
	header "boost/algorithm/cxx11/partition_point.hpp"
	header "boost/algorithm/searching/knuth_morris_pratt.hpp"
	header "boost/algorithm/searching/boyer_moore_horspool.hpp"
	header "boost/algorithm/searching/boyer_moore.hpp"
	header "boost/algorithm/searching/detail/debugging.hpp"
	header "boost/algorithm/searching/detail/bm_traits.hpp"
	header "boost/algorithm/find_not.hpp"
	header "boost/algorithm/algorithm.hpp"
	header "boost/algorithm/clamp.hpp"
	header "boost/algorithm/hex.hpp"
	header "boost/algorithm/sort_subrange.hpp"
	header "boost/algorithm/string.hpp"
	header "boost/algorithm/cxx14/equal.hpp"
	header "boost/algorithm/cxx14/mismatch.hpp"
	header "boost/algorithm/cxx14/is_permutation.hpp"
	header "boost/algorithm/string_regex.hpp"
	header "boost/algorithm/minmax.hpp"
	header "boost/algorithm/string/join.hpp"
	header "boost/algorithm/string/find_iterator.hpp"
	header "boost/algorithm/string/finder.hpp"
	header "boost/algorithm/string/iter_find.hpp"
	header "boost/algorithm/string/case_conv.hpp"
	header "boost/algorithm/string/regex.hpp"
	header "boost/algorithm/string/predicate_facade.hpp"
	header "boost/algorithm/string/predicate.hpp"
	header "boost/algorithm/string/classification.hpp"
	header "boost/algorithm/string/config.hpp"
	header "boost/algorithm/string/std/list_traits.hpp"
	header "boost/algorithm/string/std/string_traits.hpp"
	header "boost/algorithm/string/std/slist_traits.hpp"
	header "boost/algorithm/string/std/rope_traits.hpp"
	header "boost/algorithm/string/trim.hpp"
	header "boost/algorithm/string/formatter.hpp"
	header "boost/algorithm/string/find_format.hpp"
	header "boost/algorithm/string/replace.hpp"
	header "boost/algorithm/string/detail/find_iterator.hpp"
	header "boost/algorithm/string/detail/finder.hpp"
	header "boost/algorithm/string/detail/replace_storage.hpp"
	header "boost/algorithm/string/detail/formatter_regex.hpp"
	header "boost/algorithm/string/detail/case_conv.hpp"
	header "boost/algorithm/string/detail/sequence.hpp"
	header "boost/algorithm/string/detail/finder_regex.hpp"
	header "boost/algorithm/string/detail/predicate.hpp"
	header "boost/algorithm/string/detail/classification.hpp"
	header "boost/algorithm/string/detail/find_format_store.hpp"
	header "boost/algorithm/string/detail/trim.hpp"
	header "boost/algorithm/string/detail/formatter.hpp"
	header "boost/algorithm/string/detail/find_format.hpp"
	header "boost/algorithm/string/detail/find_format_all.hpp"
	header "boost/algorithm/string/detail/util.hpp"
	header "boost/algorithm/string/yes_no_type.hpp"
	header "boost/algorithm/string/find.hpp"
	header "boost/algorithm/string/constants.hpp"
	header "boost/algorithm/string/concept.hpp"
	header "boost/algorithm/string/std_containers_traits.hpp"
	header "boost/algorithm/string/regex_find_format.hpp"
	header "boost/algorithm/string/sequence_traits.hpp"
	header "boost/algorithm/string/compare.hpp"
	header "boost/algorithm/string/trim_all.hpp"
	header "boost/algorithm/string/erase.hpp"
	header "boost/algorithm/string/split.hpp"
	header "boost/algorithm/is_partitioned_until.hpp"
	header "boost/algorithm/is_clamped.hpp"
	header "boost/algorithm/apply_permutation.hpp"
	header "boost/algorithm/gather.hpp"
	header "boost/algorithm/is_palindrome.hpp"
	export *
}