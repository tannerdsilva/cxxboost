module cxxboost_spirit [system] {
	header "boost/spirit/home/support.hpp"
	header "boost/spirit/home/x3.hpp"
	header "boost/spirit/home/lex/argument.hpp"
	header "boost/spirit/home/lex/domain.hpp"
	header "boost/spirit/home/lex/lexer/action.hpp"
	header "boost/spirit/home/lex/lexer/string_token_def.hpp"
	header "boost/spirit/home/lex/lexer/sequence.hpp"
	header "boost/spirit/home/lex/lexer/char_token_def.hpp"
	header "boost/spirit/home/lex/lexer/pass_flags.hpp"
	header "boost/spirit/home/lex/lexer/support_functions_expression.hpp"
	header "boost/spirit/home/lex/lexer/token_def.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/functor.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/static_functor_data.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/iterator_tokenizer.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/token.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/static_version.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/static_lexer.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/position_token.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/functor_data.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/lexer.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/generate_static.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/wrap_action.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/semantic_action_data.hpp"
	header "boost/spirit/home/lex/lexer/lexertl/iterator.hpp"
	header "boost/spirit/home/lex/lexer/lexer.hpp"
	header "boost/spirit/home/lex/lexer/terminals.hpp"
	header "boost/spirit/home/lex/lexer/support_functions.hpp"
	header "boost/spirit/home/lex/qi.hpp"
	header "boost/spirit/home/lex/primitives.hpp"
	header "boost/spirit/home/lex/reference.hpp"
	header "boost/spirit/home/lex/qi/state_switcher.hpp"
	header "boost/spirit/home/lex/qi/in_state.hpp"
	header "boost/spirit/home/lex/qi/plain_token.hpp"
	header "boost/spirit/home/lex/qi/plain_raw_token.hpp"
	header "boost/spirit/home/lex/qi/plain_tokenid.hpp"
	header "boost/spirit/home/lex/qi/plain_tokenid_mask.hpp"
	header "boost/spirit/home/lex/detail/sequence_function.hpp"
	header "boost/spirit/home/lex/lexer_type.hpp"
	header "boost/spirit/home/lex/lexer.hpp"
	header "boost/spirit/home/lex/meta_compiler.hpp"
	header "boost/spirit/home/lex/tokenize_and_parse_attr.hpp"
	header "boost/spirit/home/lex/tokenize_and_parse.hpp"
	header "boost/spirit/home/lex/lexer_static_lexertl.hpp"
	header "boost/spirit/home/lex/argument_phoenix.hpp"
	header "boost/spirit/home/lex/lexer_lexertl.hpp"
	header "boost/spirit/home/karma.hpp"
	header "boost/spirit/home/classic/tree/ast_fwd.hpp"
	header "boost/spirit/home/classic/tree/common_fwd.hpp"
	header "boost/spirit/home/classic/tree/parse_tree.hpp"
	header "boost/spirit/home/classic/tree/parse_tree_fwd.hpp"
	header "boost/spirit/home/classic/tree/tree_to_xml.hpp"
	header "boost/spirit/home/classic/tree/common.hpp"
	header "boost/spirit/home/classic/tree/parse_tree_utils.hpp"
	header "boost/spirit/home/classic/tree/typeof.hpp"
	header "boost/spirit/home/classic/tree/ast.hpp"
	header "boost/spirit/home/classic/dynamic/for.hpp"
	header "boost/spirit/home/classic/dynamic/rule_alias.hpp"
	header "boost/spirit/home/classic/dynamic/stored_rule.hpp"
	header "boost/spirit/home/classic/dynamic/if.hpp"
	header "boost/spirit/home/classic/dynamic/switch.hpp"
	header "boost/spirit/home/classic/dynamic/while.hpp"
	header "boost/spirit/home/classic/dynamic/select.hpp"
	header "boost/spirit/home/classic/dynamic/typeof.hpp"
	header "boost/spirit/home/classic/dynamic/lazy.hpp"
	header "boost/spirit/home/classic/dynamic/stored_rule_fwd.hpp"
	header "boost/spirit/home/classic/utility.hpp"
	header "boost/spirit/home/classic/core/parser.hpp"
	header "boost/spirit/home/classic/core/safe_bool.hpp"
	header "boost/spirit/home/classic/core/nil.hpp"
	header "boost/spirit/home/classic/core/non_terminal/impl/static.hpp"
	header "boost/spirit/home/classic/core/non_terminal/subrule_fwd.hpp"
	header "boost/spirit/home/classic/core/non_terminal/rule.hpp"
	header "boost/spirit/home/classic/core/non_terminal/grammar.hpp"
	header "boost/spirit/home/classic/core/non_terminal/subrule.hpp"
	header "boost/spirit/home/classic/core/non_terminal/parser_id.hpp"
	header "boost/spirit/home/classic/core/non_terminal/parser_context.hpp"
	header "boost/spirit/home/classic/core/config.hpp"
	header "boost/spirit/home/classic/core/composite/difference.hpp"
	header "boost/spirit/home/classic/core/composite/kleene_star.hpp"
	header "boost/spirit/home/classic/core/composite/actions.hpp"
	header "boost/spirit/home/classic/core/composite/composite.hpp"
	header "boost/spirit/home/classic/core/composite/sequence.hpp"
	header "boost/spirit/home/classic/core/composite/sequential_and.hpp"
	header "boost/spirit/home/classic/core/composite/list.hpp"
	header "boost/spirit/home/classic/core/composite/directives.hpp"
	header "boost/spirit/home/classic/core/composite/optional.hpp"
	header "boost/spirit/home/classic/core/composite/alternative.hpp"
	header "boost/spirit/home/classic/core/composite/sequential_or.hpp"
	header "boost/spirit/home/classic/core/composite/exclusive_or.hpp"
	header "boost/spirit/home/classic/core/composite/operators.hpp"
	header "boost/spirit/home/classic/core/composite/no_actions.hpp"
	header "boost/spirit/home/classic/core/composite/intersection.hpp"
	header "boost/spirit/home/classic/core/composite/epsilon.hpp"
	header "boost/spirit/home/classic/core/composite/positive.hpp"
	header "boost/spirit/home/classic/core/primitives/numerics_fwd.hpp"
	header "boost/spirit/home/classic/core/primitives/primitives.hpp"
	header "boost/spirit/home/classic/core/primitives/numerics.hpp"
	header "boost/spirit/home/classic/core/assert.hpp"
	header "boost/spirit/home/classic/core/match.hpp"
	header "boost/spirit/home/classic/core/scanner/skipper.hpp"
	header "boost/spirit/home/classic/core/scanner/skipper_fwd.hpp"
	header "boost/spirit/home/classic/core/scanner/scanner_fwd.hpp"
	header "boost/spirit/home/classic/core/scanner/scanner.hpp"
	header "boost/spirit/home/classic/core/typeof.hpp"
	header "boost/spirit/home/classic/error_handling.hpp"
	header "boost/spirit/home/classic/attribute/closure.hpp"
	header "boost/spirit/home/classic/attribute/closure_context.hpp"
	header "boost/spirit/home/classic/attribute/closure_fwd.hpp"
	header "boost/spirit/home/classic/attribute/parametric.hpp"
	header "boost/spirit/home/classic/attribute/typeof.hpp"
	header "boost/spirit/home/classic/symbols.hpp"
	header "boost/spirit/home/classic/phoenix/functions.hpp"
	header "boost/spirit/home/classic/phoenix/composite.hpp"
	header "boost/spirit/home/classic/phoenix/tuple_helpers.hpp"
	header "boost/spirit/home/classic/phoenix/primitives.hpp"
	header "boost/spirit/home/classic/phoenix/special_ops.hpp"
	header "boost/spirit/home/classic/phoenix/casts.hpp"
	header "boost/spirit/home/classic/phoenix/actor.hpp"
	header "boost/spirit/home/classic/phoenix/binders.hpp"
	header "boost/spirit/home/classic/phoenix/new.hpp"
	header "boost/spirit/home/classic/phoenix/operators.hpp"
	header "boost/spirit/home/classic/phoenix/tuples.hpp"
	header "boost/spirit/home/classic/phoenix/closures.hpp"
	header "boost/spirit/home/classic/phoenix/statements.hpp"
	header "boost/spirit/home/classic/meta/parser_traits.hpp"
	header "boost/spirit/home/classic/meta/refactoring.hpp"
	header "boost/spirit/home/classic/meta/fundamental.hpp"
	header "boost/spirit/home/classic/meta/as_parser.hpp"
	header "boost/spirit/home/classic/meta/traverse.hpp"
	header "boost/spirit/home/classic/debug.hpp"
	header "boost/spirit/home/classic/attribute.hpp"
	header "boost/spirit/home/classic/meta.hpp"
	header "boost/spirit/home/classic/error_handling/exceptions_fwd.hpp"
	header "boost/spirit/home/classic/error_handling/exceptions.hpp"
	header "boost/spirit/home/classic/error_handling/typeof.hpp"
	header "boost/spirit/home/classic/version.hpp"
	header "boost/spirit/home/classic/actor.hpp"
	header "boost/spirit/home/classic/iterator/multi_pass.hpp"
	header "boost/spirit/home/classic/iterator/position_iterator.hpp"
	header "boost/spirit/home/classic/iterator/file_iterator_fwd.hpp"
	header "boost/spirit/home/classic/iterator/fixed_size_queue.hpp"
	header "boost/spirit/home/classic/iterator/position_iterator_fwd.hpp"
	header "boost/spirit/home/classic/iterator/multi_pass_fwd.hpp"
	header "boost/spirit/home/classic/iterator/typeof.hpp"
	header "boost/spirit/home/classic/iterator/file_iterator.hpp"
	header "boost/spirit/home/classic/namespace.hpp"
	header "boost/spirit/home/classic/symbols/symbols_fwd.hpp"
	header "boost/spirit/home/classic/symbols/symbols.hpp"
	header "boost/spirit/home/classic/symbols/typeof.hpp"
	header "boost/spirit/home/classic/dynamic.hpp"
	header "boost/spirit/home/classic/actor/push_back_actor.hpp"
	header "boost/spirit/home/classic/actor/insert_key_actor.hpp"
	header "boost/spirit/home/classic/actor/insert_at_actor.hpp"
	header "boost/spirit/home/classic/actor/clear_actor.hpp"
	header "boost/spirit/home/classic/actor/ref_const_ref_const_ref_a.hpp"
	header "boost/spirit/home/classic/actor/ref_const_ref_value_actor.hpp"
	header "boost/spirit/home/classic/actor/increment_actor.hpp"
	header "boost/spirit/home/classic/actor/ref_actor.hpp"
	header "boost/spirit/home/classic/actor/push_front_actor.hpp"
	header "boost/spirit/home/classic/actor/erase_actor.hpp"
	header "boost/spirit/home/classic/actor/decrement_actor.hpp"
	header "boost/spirit/home/classic/actor/ref_value_actor.hpp"
	header "boost/spirit/home/classic/actor/swap_actor.hpp"
	header "boost/spirit/home/classic/actor/ref_const_ref_actor.hpp"
	header "boost/spirit/home/classic/actor/assign_key_actor.hpp"
	header "boost/spirit/home/classic/actor/assign_actor.hpp"
	header "boost/spirit/home/classic/actor/typeof.hpp"
	header "boost/spirit/home/classic/phoenix.hpp"
	header "boost/spirit/home/classic/iterator.hpp"
	header "boost/spirit/home/classic/core.hpp"
	header "boost/spirit/home/classic/debug/parser_names.hpp"
	header "boost/spirit/home/classic/debug/typeof.hpp"
	header "boost/spirit/home/classic/debug/debug_node.hpp"
	header "boost/spirit/home/classic/debug/minimal.hpp"
	header "boost/spirit/home/classic/utility/lists_fwd.hpp"
	header "boost/spirit/home/classic/utility/impl/chset/basic_chset.hpp"
	header "boost/spirit/home/classic/utility/impl/chset/range_run.hpp"
	header "boost/spirit/home/classic/utility/rule_parser.hpp"
	header "boost/spirit/home/classic/utility/loops.hpp"
	header "boost/spirit/home/classic/utility/flush_multi_pass.hpp"
	header "boost/spirit/home/classic/utility/escape_char_fwd.hpp"
	header "boost/spirit/home/classic/utility/chset.hpp"
	header "boost/spirit/home/classic/utility/chset_operators.hpp"
	header "boost/spirit/home/classic/utility/regex.hpp"
	header "boost/spirit/home/classic/utility/distinct.hpp"
	header "boost/spirit/home/classic/utility/grammar_def.hpp"
	header "boost/spirit/home/classic/utility/distinct_fwd.hpp"
	header "boost/spirit/home/classic/utility/grammar_def_fwd.hpp"
	header "boost/spirit/home/classic/utility/scoped_lock.hpp"
	header "boost/spirit/home/classic/utility/functor_parser.hpp"
	header "boost/spirit/home/classic/utility/escape_char.hpp"
	header "boost/spirit/home/classic/utility/confix.hpp"
	header "boost/spirit/home/classic/utility/lists.hpp"
	header "boost/spirit/home/classic/utility/confix_fwd.hpp"
	header "boost/spirit/home/classic/utility/typeof.hpp"
	header "boost/spirit/home/qi.hpp"
	header "boost/spirit/home/lex.hpp"
	header "boost/spirit/home/classic.hpp"
	header "boost/spirit/home/qi/nonterminal/rule.hpp"
	header "boost/spirit/home/qi/nonterminal/debug_handler_state.hpp"
	header "boost/spirit/home/qi/nonterminal/debug_handler.hpp"
	header "boost/spirit/home/qi/nonterminal/simple_trace.hpp"
	header "boost/spirit/home/qi/nonterminal/success_handler.hpp"
	header "boost/spirit/home/qi/nonterminal/grammar.hpp"
	header "boost/spirit/home/qi/nonterminal/error_handler.hpp"
	header "boost/spirit/home/qi/nonterminal/detail/parameterized.hpp"
	header "boost/spirit/home/qi/nonterminal/detail/parser_binder.hpp"
	header "boost/spirit/home/qi/nonterminal/detail/fcall.hpp"
	header "boost/spirit/home/qi/nonterminal/nonterminal_fwd.hpp"
	header "boost/spirit/home/qi/auto.hpp"
	header "boost/spirit/home/qi/domain.hpp"
	header "boost/spirit/home/qi/action.hpp"
	header "boost/spirit/home/qi/char/char_class.hpp"
	header "boost/spirit/home/qi/char/char.hpp"
	header "boost/spirit/home/qi/char/char_parser.hpp"
	header "boost/spirit/home/qi/parser.hpp"
	header "boost/spirit/home/qi/auto/auto.hpp"
	header "boost/spirit/home/qi/auto/create_parser.hpp"
	header "boost/spirit/home/qi/auto/meta_create.hpp"
	header "boost/spirit/home/qi/stream/match_manip_attr.hpp"
	header "boost/spirit/home/qi/stream/stream.hpp"
	header "boost/spirit/home/qi/stream/detail/match_manip.hpp"
	header "boost/spirit/home/qi/stream/detail/match_manip_auto.hpp"
	header "boost/spirit/home/qi/stream/match_manip.hpp"
	header "boost/spirit/home/qi/parse_attr.hpp"
	header "boost/spirit/home/qi/match_auto.hpp"
	header "boost/spirit/home/qi/stream.hpp"
	header "boost/spirit/home/qi/auxiliary.hpp"
	header "boost/spirit/home/qi/reference.hpp"
	header "boost/spirit/home/qi/operator.hpp"
	header "boost/spirit/home/qi/action/action.hpp"
	header "boost/spirit/home/qi/numeric/numeric_utils.hpp"
	header "boost/spirit/home/qi/numeric/bool_policies.hpp"
	header "boost/spirit/home/qi/numeric/bool.hpp"
	header "boost/spirit/home/qi/numeric/real.hpp"
	header "boost/spirit/home/qi/numeric/uint.hpp"
	header "boost/spirit/home/qi/numeric/detail/numeric_utils.hpp"
	header "boost/spirit/home/qi/numeric/detail/real_impl.hpp"
	header "boost/spirit/home/qi/numeric/int.hpp"
	header "boost/spirit/home/qi/numeric/real_policies.hpp"
	header "boost/spirit/home/qi/directive/as.hpp"
	header "boost/spirit/home/qi/directive/expect.hpp"
	header "boost/spirit/home/qi/directive/lexeme.hpp"
	header "boost/spirit/home/qi/directive/omit.hpp"
	header "boost/spirit/home/qi/directive/no_skip.hpp"
	header "boost/spirit/home/qi/directive/raw.hpp"
	header "boost/spirit/home/qi/directive/hold.hpp"
	header "boost/spirit/home/qi/directive/skip.hpp"
	header "boost/spirit/home/qi/directive/no_case.hpp"
	header "boost/spirit/home/qi/directive/repeat.hpp"
	header "boost/spirit/home/qi/directive/encoding.hpp"
	header "boost/spirit/home/qi/directive/matches.hpp"
	header "boost/spirit/home/qi/detail/fail_function.hpp"
	header "boost/spirit/home/qi/detail/unused_skipper.hpp"
	header "boost/spirit/home/qi/detail/assign_to.hpp"
	header "boost/spirit/home/qi/detail/attributes.hpp"
	header "boost/spirit/home/qi/detail/pass_function.hpp"
	header "boost/spirit/home/qi/detail/pass_container.hpp"
	header "boost/spirit/home/qi/detail/expect_function.hpp"
	header "boost/spirit/home/qi/detail/string_parse.hpp"
	header "boost/spirit/home/qi/detail/alternative_function.hpp"
	header "boost/spirit/home/qi/detail/expectation_failure.hpp"
	header "boost/spirit/home/qi/detail/construct.hpp"
	header "boost/spirit/home/qi/detail/parse_auto.hpp"
	header "boost/spirit/home/qi/detail/enable_lit.hpp"
	header "boost/spirit/home/qi/detail/parse.hpp"
	header "boost/spirit/home/qi/detail/permute_function.hpp"
	header "boost/spirit/home/qi/match.hpp"
	header "boost/spirit/home/qi/string.hpp"
	header "boost/spirit/home/qi/meta_compiler.hpp"
	header "boost/spirit/home/qi/binary.hpp"
	header "boost/spirit/home/qi/numeric.hpp"
	header "boost/spirit/home/qi/binary/binary.hpp"
	header "boost/spirit/home/qi/string/tst.hpp"
	header "boost/spirit/home/qi/string/symbols.hpp"
	header "boost/spirit/home/qi/string/tst_map.hpp"
	header "boost/spirit/home/qi/string/detail/tst.hpp"
	header "boost/spirit/home/qi/string/lit.hpp"
	header "boost/spirit/home/qi/skip_flag.hpp"
	header "boost/spirit/home/qi/directive.hpp"
	header "boost/spirit/home/qi/char.hpp"
	header "boost/spirit/home/qi/copy.hpp"
	header "boost/spirit/home/qi/skip_over.hpp"
	header "boost/spirit/home/qi/operator/expect.hpp"
	header "boost/spirit/home/qi/operator/difference.hpp"
	header "boost/spirit/home/qi/operator/plus.hpp"
	header "boost/spirit/home/qi/operator/not_predicate.hpp"
	header "boost/spirit/home/qi/operator/sequence_base.hpp"
	header "boost/spirit/home/qi/operator/permutation.hpp"
	header "boost/spirit/home/qi/operator/sequence.hpp"
	header "boost/spirit/home/qi/operator/list.hpp"
	header "boost/spirit/home/qi/operator/kleene.hpp"
	header "boost/spirit/home/qi/operator/optional.hpp"
	header "boost/spirit/home/qi/operator/alternative.hpp"
	header "boost/spirit/home/qi/operator/sequential_or.hpp"
	header "boost/spirit/home/qi/operator/and_predicate.hpp"
	header "boost/spirit/home/qi/nonterminal.hpp"
	header "boost/spirit/home/qi/parse.hpp"
	header "boost/spirit/home/qi/what.hpp"
	header "boost/spirit/home/qi/auxiliary/eps.hpp"
	header "boost/spirit/home/qi/auxiliary/attr.hpp"
	header "boost/spirit/home/qi/auxiliary/eol.hpp"
	header "boost/spirit/home/qi/auxiliary/eoi.hpp"
	header "boost/spirit/home/qi/auxiliary/attr_cast.hpp"
	header "boost/spirit/home/qi/auxiliary/lazy.hpp"
	header "boost/spirit/home/karma/delimit_flag.hpp"
	header "boost/spirit/home/karma/nonterminal/rule.hpp"
	header "boost/spirit/home/karma/nonterminal/debug_handler_state.hpp"
	header "boost/spirit/home/karma/nonterminal/debug_handler.hpp"
	header "boost/spirit/home/karma/nonterminal/simple_trace.hpp"
	header "boost/spirit/home/karma/nonterminal/grammar.hpp"
	header "boost/spirit/home/karma/nonterminal/detail/parameterized.hpp"
	header "boost/spirit/home/karma/nonterminal/detail/generator_binder.hpp"
	header "boost/spirit/home/karma/nonterminal/detail/fcall.hpp"
	header "boost/spirit/home/karma/nonterminal/nonterminal_fwd.hpp"
	header "boost/spirit/home/karma/auto.hpp"
	header "boost/spirit/home/karma/domain.hpp"
	header "boost/spirit/home/karma/action.hpp"
	header "boost/spirit/home/karma/char/char_class.hpp"
	header "boost/spirit/home/karma/char/char_generator.hpp"
	header "boost/spirit/home/karma/char/char.hpp"
	header "boost/spirit/home/karma/generate.hpp"
	header "boost/spirit/home/karma/auto/auto.hpp"
	header "boost/spirit/home/karma/auto/create_generator.hpp"
	header "boost/spirit/home/karma/auto/meta_create.hpp"
	header "boost/spirit/home/karma/phoenix_attributes.hpp"
	header "boost/spirit/home/karma/stream/format_manip_attr.hpp"
	header "boost/spirit/home/karma/stream/stream.hpp"
	header "boost/spirit/home/karma/stream/format_manip.hpp"
	header "boost/spirit/home/karma/stream/detail/format_manip_auto.hpp"
	header "boost/spirit/home/karma/stream/detail/format_manip.hpp"
	header "boost/spirit/home/karma/stream/ostream_iterator.hpp"
	header "boost/spirit/home/karma/stream.hpp"
	header "boost/spirit/home/karma/auxiliary.hpp"
	header "boost/spirit/home/karma/reference.hpp"
	header "boost/spirit/home/karma/format_auto.hpp"
	header "boost/spirit/home/karma/operator.hpp"
	header "boost/spirit/home/karma/action/action.hpp"
	header "boost/spirit/home/karma/numeric/bool_policies.hpp"
	header "boost/spirit/home/karma/numeric/bool.hpp"
	header "boost/spirit/home/karma/numeric/real.hpp"
	header "boost/spirit/home/karma/numeric/uint.hpp"
	header "boost/spirit/home/karma/numeric/detail/numeric_utils.hpp"
	header "boost/spirit/home/karma/numeric/detail/bool_utils.hpp"
	header "boost/spirit/home/karma/numeric/detail/real_utils.hpp"
	header "boost/spirit/home/karma/numeric/int.hpp"
	header "boost/spirit/home/karma/numeric/real_policies.hpp"
	header "boost/spirit/home/karma/directive/as.hpp"
	header "boost/spirit/home/karma/directive/strict_relaxed.hpp"
	header "boost/spirit/home/karma/directive/center_alignment.hpp"
	header "boost/spirit/home/karma/directive/verbatim.hpp"
	header "boost/spirit/home/karma/directive/omit.hpp"
	header "boost/spirit/home/karma/directive/delimit.hpp"
	header "boost/spirit/home/karma/directive/right_alignment.hpp"
	header "boost/spirit/home/karma/directive/duplicate.hpp"
	header "boost/spirit/home/karma/directive/upper_lower_case.hpp"
	header "boost/spirit/home/karma/directive/columns.hpp"
	header "boost/spirit/home/karma/directive/repeat.hpp"
	header "boost/spirit/home/karma/directive/encoding.hpp"
	header "boost/spirit/home/karma/directive/buffer.hpp"
	header "boost/spirit/home/karma/directive/no_delimit.hpp"
	header "boost/spirit/home/karma/directive/maxwidth.hpp"
	header "boost/spirit/home/karma/directive/left_alignment.hpp"
	header "boost/spirit/home/karma/detail/as.hpp"
	header "boost/spirit/home/karma/detail/fail_function.hpp"
	header "boost/spirit/home/karma/detail/generate.hpp"
	header "boost/spirit/home/karma/detail/attributes.hpp"
	header "boost/spirit/home/karma/detail/pass_container.hpp"
	header "boost/spirit/home/karma/detail/unused_delimiter.hpp"
	header "boost/spirit/home/karma/detail/get_stricttag.hpp"
	header "boost/spirit/home/karma/detail/generate_to.hpp"
	header "boost/spirit/home/karma/detail/indirect_iterator.hpp"
	header "boost/spirit/home/karma/detail/generate_auto.hpp"
	header "boost/spirit/home/karma/detail/alternative_function.hpp"
	header "boost/spirit/home/karma/detail/string_generate.hpp"
	header "boost/spirit/home/karma/detail/extract_from.hpp"
	header "boost/spirit/home/karma/detail/output_iterator.hpp"
	header "boost/spirit/home/karma/detail/default_width.hpp"
	header "boost/spirit/home/karma/detail/get_casetag.hpp"
	header "boost/spirit/home/karma/detail/enable_lit.hpp"
	header "boost/spirit/home/karma/detail/string_compare.hpp"
	header "boost/spirit/home/karma/string.hpp"
	header "boost/spirit/home/karma/meta_compiler.hpp"
	header "boost/spirit/home/karma/binary.hpp"
	header "boost/spirit/home/karma/numeric.hpp"
	header "boost/spirit/home/karma/generator.hpp"
	header "boost/spirit/home/karma/binary/padding.hpp"
	header "boost/spirit/home/karma/binary/binary.hpp"
	header "boost/spirit/home/karma/string/symbols.hpp"
	header "boost/spirit/home/karma/string/lit.hpp"
	header "boost/spirit/home/karma/directive.hpp"
	header "boost/spirit/home/karma/char.hpp"
	header "boost/spirit/home/karma/delimit_out.hpp"
	header "boost/spirit/home/karma/format.hpp"
	header "boost/spirit/home/karma/operator/plus.hpp"
	header "boost/spirit/home/karma/operator/not_predicate.hpp"
	header "boost/spirit/home/karma/operator/sequence.hpp"
	header "boost/spirit/home/karma/operator/list.hpp"
	header "boost/spirit/home/karma/operator/kleene.hpp"
	header "boost/spirit/home/karma/operator/optional.hpp"
	header "boost/spirit/home/karma/operator/alternative.hpp"
	header "boost/spirit/home/karma/operator/and_predicate.hpp"
	header "boost/spirit/home/karma/nonterminal.hpp"
	header "boost/spirit/home/karma/what.hpp"
	header "boost/spirit/home/karma/auxiliary/eps.hpp"
	header "boost/spirit/home/karma/auxiliary/eol.hpp"
	header "boost/spirit/home/karma/auxiliary/attr_cast.hpp"
	header "boost/spirit/home/karma/auxiliary/lazy.hpp"
	header "boost/spirit/home/karma/generate_attr.hpp"
	header "boost/spirit/home/support/sequence_base_id.hpp"
	header "boost/spirit/home/support/char_class.hpp"
	header "boost/spirit/home/support/common_terminals.hpp"
	header "boost/spirit/home/support/has_semantic_action.hpp"
	header "boost/spirit/home/support/argument.hpp"
	header "boost/spirit/home/support/container.hpp"
	header "boost/spirit/home/support/multi_pass.hpp"
	header "boost/spirit/home/support/nonterminal/extract_param.hpp"
	header "boost/spirit/home/support/nonterminal/expand_arg.hpp"
	header "boost/spirit/home/support/nonterminal/locals.hpp"
	header "boost/spirit/home/support/auto.hpp"
	header "boost/spirit/home/support/info.hpp"
	header "boost/spirit/home/support/terminal_expression.hpp"
	header "boost/spirit/home/support/utf8.hpp"
	header "boost/spirit/home/support/attributes.hpp"
	header "boost/spirit/home/support/adapt_adt_attributes.hpp"
	header "boost/spirit/home/support/auto/meta_create.hpp"
	header "boost/spirit/home/support/char_encoding/standard.hpp"
	header "boost/spirit/home/support/char_encoding/unicode.hpp"
	header "boost/spirit/home/support/char_encoding/unicode/lowercase_table.hpp"
	header "boost/spirit/home/support/char_encoding/unicode/category_table.hpp"
	header "boost/spirit/home/support/char_encoding/unicode/uppercase_table.hpp"
	header "boost/spirit/home/support/char_encoding/unicode/script_table.hpp"
	header "boost/spirit/home/support/char_encoding/unicode/query.hpp"
	header "boost/spirit/home/support/char_encoding/standard_wide.hpp"
	header "boost/spirit/home/support/char_encoding/ascii.hpp"
	header "boost/spirit/home/support/char_encoding/iso8859_1.hpp"
	header "boost/spirit/home/support/assert_msg.hpp"
	header "boost/spirit/home/support/terminal.hpp"
	header "boost/spirit/home/support/utree.hpp"
	header "boost/spirit/home/support/modify.hpp"
	header "boost/spirit/home/support/algorithm/any_ns.hpp"
	header "boost/spirit/home/support/algorithm/any_if.hpp"
	header "boost/spirit/home/support/algorithm/any_if_ns.hpp"
	header "boost/spirit/home/support/algorithm/any.hpp"
	header "boost/spirit/home/support/algorithm/any_if_ns_so.hpp"
	header "boost/spirit/home/support/algorithm/any_ns_so.hpp"
	header "boost/spirit/home/support/action_dispatch.hpp"
	header "boost/spirit/home/support/limits.hpp"
	header "boost/spirit/home/support/numeric_traits.hpp"
	header "boost/spirit/home/support/context.hpp"
	header "boost/spirit/home/support/unused.hpp"
	header "boost/spirit/home/support/utree/utree_traits.hpp"
	header "boost/spirit/home/support/utree/utree_traits_fwd.hpp"
	header "boost/spirit/home/support/utree/utree.hpp"
	header "boost/spirit/home/support/utree/detail/utree_detail1.hpp"
	header "boost/spirit/home/support/utree/detail/utree_detail2.hpp"
	header "boost/spirit/home/support/utree/operators.hpp"
	header "boost/spirit/home/support/char_set/basic_chset.hpp"
	header "boost/spirit/home/support/char_set/range_run_impl.hpp"
	header "boost/spirit/home/support/char_set/range_functions.hpp"
	header "boost/spirit/home/support/char_set/range.hpp"
	header "boost/spirit/home/support/char_set/range_run.hpp"
	header "boost/spirit/home/support/detail/what_function.hpp"
	header "boost/spirit/home/support/detail/lexer/rules.hpp"
	header "boost/spirit/home/support/detail/lexer/file_input.hpp"
	header "boost/spirit/home/support/detail/lexer/consts.hpp"
	header "boost/spirit/home/support/detail/lexer/generate_cpp.hpp"
	header "boost/spirit/home/support/detail/lexer/generate_re2c.hpp"
	header "boost/spirit/home/support/detail/lexer/size_t.hpp"
	header "boost/spirit/home/support/detail/lexer/debug.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser_helper.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser_state.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tokeniser/num_token.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tree/sequence_node.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tree/selection_node.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tree/end_node.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tree/node.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tree/leaf_node.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/tree/iteration_node.hpp"
	header "boost/spirit/home/support/detail/lexer/parser/parser.hpp"
	header "boost/spirit/home/support/detail/lexer/char_traits.hpp"
	header "boost/spirit/home/support/detail/lexer/state_machine.hpp"
	header "boost/spirit/home/support/detail/lexer/conversion/char_state_machine.hpp"
	header "boost/spirit/home/support/detail/lexer/string_token.hpp"
	header "boost/spirit/home/support/detail/lexer/runtime_error.hpp"
	header "boost/spirit/home/support/detail/lexer/generator.hpp"
	header "boost/spirit/home/support/detail/lexer/internals.hpp"
	header "boost/spirit/home/support/detail/lexer/containers/ptr_list.hpp"
	header "boost/spirit/home/support/detail/lexer/containers/ptr_vector.hpp"
	header "boost/spirit/home/support/detail/lexer/partition/charset.hpp"
	header "boost/spirit/home/support/detail/lexer/partition/equivset.hpp"
	header "boost/spirit/home/support/detail/lexer/input.hpp"
	header "boost/spirit/home/support/detail/is_spirit_tag.hpp"
	header "boost/spirit/home/support/detail/hold_any.hpp"
	header "boost/spirit/home/support/detail/as_variant.hpp"
	header "boost/spirit/home/support/detail/endian.hpp"
	header "boost/spirit/home/support/detail/get_encoding.hpp"
	header "boost/spirit/home/support/detail/pow10.hpp"
	header "boost/spirit/home/support/detail/make_vector.hpp"
	header "boost/spirit/home/support/detail/scoped_enum_emulation.hpp"
	header "boost/spirit/home/support/detail/make_cons.hpp"
	header "boost/spirit/home/support/multi_pass_wrapper.hpp"
	header "boost/spirit/home/support/meta_compiler.hpp"
	header "boost/spirit/home/support/handles_container.hpp"
	header "boost/spirit/home/support/string_traits.hpp"
	header "boost/spirit/home/support/argument_expression.hpp"
	header "boost/spirit/home/support/make_component.hpp"
	header "boost/spirit/home/support/lazy.hpp"
	header "boost/spirit/home/support/extended_variant.hpp"
	header "boost/spirit/home/support/iterators/multi_pass.hpp"
	header "boost/spirit/home/support/iterators/line_pos_iterator.hpp"
	header "boost/spirit/home/support/iterators/look_ahead.hpp"
	header "boost/spirit/home/support/iterators/detail/multi_pass.hpp"
	header "boost/spirit/home/support/iterators/detail/input_iterator_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/split_functor_input_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/first_owner_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/split_std_deque_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/buf_id_check_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/ref_counted_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/functor_input_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/buffering_input_iterator_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/lex_input_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/fixed_size_queue.hpp"
	header "boost/spirit/home/support/iterators/detail/istream_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/combine_policies.hpp"
	header "boost/spirit/home/support/iterators/detail/fixed_size_queue_policy.hpp"
	header "boost/spirit/home/support/iterators/detail/no_check_policy.hpp"
	header "boost/spirit/home/support/iterators/ostream_iterator.hpp"
	header "boost/spirit/home/support/iterators/istream_iterator.hpp"
	header "boost/spirit/home/support/iterators/multi_pass_fwd.hpp"
	header "boost/spirit/home/support/auxiliary/attr_cast.hpp"
	header "boost/spirit/home/support/attributes_fwd.hpp"
	header "boost/spirit/home/x3/nonterminal/rule.hpp"
	header "boost/spirit/home/x3/nonterminal/debug_handler_state.hpp"
	header "boost/spirit/home/x3/nonterminal/simple_trace.hpp"
	header "boost/spirit/home/x3/nonterminal/detail/transform_attribute.hpp"
	header "boost/spirit/home/x3/nonterminal/detail/rule.hpp"
	header "boost/spirit/home/x3/char/char_class.hpp"
	header "boost/spirit/home/x3/char/unicode.hpp"
	header "boost/spirit/home/x3/char/char_class_tags.hpp"
	header "boost/spirit/home/x3/char/literal_char.hpp"
	header "boost/spirit/home/x3/char/any_char.hpp"
	header "boost/spirit/home/x3/char/negated_char_parser.hpp"
	header "boost/spirit/home/x3/char/detail/cast_char.hpp"
	header "boost/spirit/home/x3/char/char_set.hpp"
	header "boost/spirit/home/x3/char/char.hpp"
	header "boost/spirit/home/x3/char/char_parser.hpp"
	header "boost/spirit/home/x3/core/action.hpp"
	header "boost/spirit/home/x3/core/parser.hpp"
	header "boost/spirit/home/x3/core/detail/parse_into_container.hpp"
	header "boost/spirit/home/x3/core/call.hpp"
	header "boost/spirit/home/x3/core/proxy.hpp"
	header "boost/spirit/home/x3/core/skip_over.hpp"
	header "boost/spirit/home/x3/core/parse.hpp"
	header "boost/spirit/home/x3/auxiliary.hpp"
	header "boost/spirit/home/x3/version.hpp"
	header "boost/spirit/home/x3/operator.hpp"
	header "boost/spirit/home/x3/numeric/bool_policies.hpp"
	header "boost/spirit/home/x3/numeric/bool.hpp"
	header "boost/spirit/home/x3/numeric/real.hpp"
	header "boost/spirit/home/x3/numeric/uint.hpp"
	header "boost/spirit/home/x3/numeric/int.hpp"
	header "boost/spirit/home/x3/numeric/real_policies.hpp"
	header "boost/spirit/home/x3/directive/expect.hpp"
	header "boost/spirit/home/x3/directive/lexeme.hpp"
	header "boost/spirit/home/x3/directive/omit.hpp"
	header "boost/spirit/home/x3/directive/no_skip.hpp"
	header "boost/spirit/home/x3/directive/raw.hpp"
	header "boost/spirit/home/x3/directive/skip.hpp"
	header "boost/spirit/home/x3/directive/seek.hpp"
	header "boost/spirit/home/x3/directive/no_case.hpp"
	header "boost/spirit/home/x3/directive/repeat.hpp"
	header "boost/spirit/home/x3/directive/with.hpp"
	header "boost/spirit/home/x3/directive/matches.hpp"
	header "boost/spirit/home/x3/directive/confix.hpp"
	header "boost/spirit/home/x3/support/subcontext.hpp"
	header "boost/spirit/home/x3/support/traits/is_parser.hpp"
	header "boost/spirit/home/x3/support/traits/tuple_traits.hpp"
	header "boost/spirit/home/x3/support/traits/attribute_type.hpp"
	header "boost/spirit/home/x3/support/traits/transform_attribute.hpp"
	header "boost/spirit/home/x3/support/traits/attribute_of_binary.hpp"
	header "boost/spirit/home/x3/support/traits/print_attribute.hpp"
	header "boost/spirit/home/x3/support/traits/print_token.hpp"
	header "boost/spirit/home/x3/support/traits/attribute_category.hpp"
	header "boost/spirit/home/x3/support/traits/variant_has_substitute.hpp"
	header "boost/spirit/home/x3/support/traits/container_traits.hpp"
	header "boost/spirit/home/x3/support/traits/attribute_of.hpp"
	header "boost/spirit/home/x3/support/traits/has_attribute.hpp"
	header "boost/spirit/home/x3/support/traits/numeric_traits.hpp"
	header "boost/spirit/home/x3/support/traits/variant_find_substitute.hpp"
	header "boost/spirit/home/x3/support/traits/is_substitute.hpp"
	header "boost/spirit/home/x3/support/traits/handles_container.hpp"
	header "boost/spirit/home/x3/support/traits/string_traits.hpp"
	header "boost/spirit/home/x3/support/traits/move_to.hpp"
	header "boost/spirit/home/x3/support/traits/is_variant.hpp"
	header "boost/spirit/home/x3/support/traits/pseudo_attribute.hpp"
	header "boost/spirit/home/x3/support/traits/optional_traits.hpp"
	header "boost/spirit/home/x3/support/traits/is_range.hpp"
	header "boost/spirit/home/x3/support/no_case.hpp"
	header "boost/spirit/home/x3/support/context.hpp"
	header "boost/spirit/home/x3/support/unused.hpp"
	header "boost/spirit/home/x3/support/numeric_utils/extract_real.hpp"
	header "boost/spirit/home/x3/support/numeric_utils/extract_int.hpp"
	header "boost/spirit/home/x3/support/numeric_utils/detail/extract_int.hpp"
	header "boost/spirit/home/x3/support/numeric_utils/pow10.hpp"
	header "boost/spirit/home/x3/support/ast/variant.hpp"
	header "boost/spirit/home/x3/support/ast/position_tagged.hpp"
	header "boost/spirit/home/x3/support/utility/is_callable.hpp"
	header "boost/spirit/home/x3/support/utility/lambda_visitor.hpp"
	header "boost/spirit/home/x3/support/utility/sfinae.hpp"
	header "boost/spirit/home/x3/support/utility/utf8.hpp"
	header "boost/spirit/home/x3/support/utility/annotate_on_success.hpp"
	header "boost/spirit/home/x3/support/utility/error_reporting.hpp"
	header "boost/spirit/home/x3/string.hpp"
	header "boost/spirit/home/x3/binary.hpp"
	header "boost/spirit/home/x3/numeric.hpp"
	header "boost/spirit/home/x3/binary/binary.hpp"
	header "boost/spirit/home/x3/string/tst.hpp"
	header "boost/spirit/home/x3/string/symbols.hpp"
	header "boost/spirit/home/x3/string/tst_map.hpp"
	header "boost/spirit/home/x3/string/detail/tst.hpp"
	header "boost/spirit/home/x3/string/detail/string_parse.hpp"
	header "boost/spirit/home/x3/string/literal_string.hpp"
	header "boost/spirit/home/x3/directive.hpp"
	header "boost/spirit/home/x3/char.hpp"
	header "boost/spirit/home/x3/operator/difference.hpp"
	header "boost/spirit/home/x3/operator/plus.hpp"
	header "boost/spirit/home/x3/operator/not_predicate.hpp"
	header "boost/spirit/home/x3/operator/sequence.hpp"
	header "boost/spirit/home/x3/operator/list.hpp"
	header "boost/spirit/home/x3/operator/kleene.hpp"
	header "boost/spirit/home/x3/operator/detail/sequence.hpp"
	header "boost/spirit/home/x3/operator/detail/alternative.hpp"
	header "boost/spirit/home/x3/operator/optional.hpp"
	header "boost/spirit/home/x3/operator/alternative.hpp"
	header "boost/spirit/home/x3/operator/and_predicate.hpp"
	header "boost/spirit/home/x3/nonterminal.hpp"
	header "boost/spirit/home/x3/core.hpp"
	header "boost/spirit/home/x3/auxiliary/eps.hpp"
	header "boost/spirit/home/x3/auxiliary/any_parser.hpp"
	header "boost/spirit/home/x3/auxiliary/guard.hpp"
	header "boost/spirit/home/x3/auxiliary/attr.hpp"
	header "boost/spirit/home/x3/auxiliary/eol.hpp"
	header "boost/spirit/home/x3/auxiliary/eoi.hpp"
	header "boost/spirit/repository/home/karma.hpp"
	header "boost/spirit/repository/home/qi.hpp"
	header "boost/spirit/repository/home/qi/primitive.hpp"
	header "boost/spirit/repository/home/qi/nonterminal/subrule.hpp"
	header "boost/spirit/repository/home/qi/primitive/flush_multi_pass.hpp"
	header "boost/spirit/repository/home/qi/primitive/advance.hpp"
	header "boost/spirit/repository/home/qi/primitive/iter_pos.hpp"
	header "boost/spirit/repository/home/qi/operator.hpp"
	header "boost/spirit/repository/home/qi/directive/distinct.hpp"
	header "boost/spirit/repository/home/qi/directive/seek.hpp"
	header "boost/spirit/repository/home/qi/directive/kwd.hpp"
	header "boost/spirit/repository/home/qi/directive/confix.hpp"
	header "boost/spirit/repository/home/qi/directive.hpp"
	header "boost/spirit/repository/home/qi/operator/keywords.hpp"
	header "boost/spirit/repository/home/qi/operator/detail/keywords.hpp"
	header "boost/spirit/repository/home/qi/nonterminal.hpp"
	header "boost/spirit/repository/home/karma/nonterminal/subrule.hpp"
	header "boost/spirit/repository/home/karma/directive/confix.hpp"
	header "boost/spirit/repository/home/karma/directive.hpp"
	header "boost/spirit/repository/home/karma/nonterminal.hpp"
	header "boost/spirit/repository/home/support/flush_multi_pass.hpp"
	header "boost/spirit/repository/home/support/distinct.hpp"
	header "boost/spirit/repository/home/support/seek.hpp"
	header "boost/spirit/repository/home/support/kwd.hpp"
	header "boost/spirit/repository/home/support/confix.hpp"
	header "boost/spirit/repository/home/support/subrule_context.hpp"
	header "boost/spirit/repository/include/qi_subrule.hpp"
	header "boost/spirit/repository/include/karma.hpp"
	header "boost/spirit/repository/include/qi_seek.hpp"
	header "boost/spirit/repository/include/karma_subrule.hpp"
	header "boost/spirit/repository/include/qi.hpp"
	header "boost/spirit/repository/include/qi_iter_pos.hpp"
	header "boost/spirit/repository/include/karma_directive.hpp"
	header "boost/spirit/repository/include/qi_primitive.hpp"
	header "boost/spirit/repository/include/karma_confix.hpp"
	header "boost/spirit/repository/include/qi_advance.hpp"
	header "boost/spirit/repository/include/qi_distinct.hpp"
	header "boost/spirit/repository/include/qi_keywords.hpp"
	header "boost/spirit/repository/include/qi_directive.hpp"
	header "boost/spirit/repository/include/qi_kwd.hpp"
	header "boost/spirit/repository/include/qi_confix.hpp"
	header "boost/spirit/repository/include/karma_nonterminal.hpp"
	header "boost/spirit/repository/include/qi_flush_multi_pass.hpp"
	header "boost/spirit/repository/include/qi_nonterminal.hpp"
	header "boost/spirit/include/support_any.hpp"
	header "boost/spirit/include/qi_auxiliary.hpp"
	header "boost/spirit/include/classic_parse_tree_utils.hpp"
	header "boost/spirit/include/support_string_traits.hpp"
	header "boost/spirit/include/karma_attr_cast.hpp"
	header "boost/spirit/include/classic_chset.hpp"
	header "boost/spirit/include/phoenix1.hpp"
	header "boost/spirit/include/classic_escape_char.hpp"
	header "boost/spirit/include/lex_primitives.hpp"
	header "boost/spirit/include/classic_distinct.hpp"
	header "boost/spirit/include/classic_alternative.hpp"
	header "boost/spirit/include/classic_ref_const_ref_actor.hpp"
	header "boost/spirit/include/karma_what.hpp"
	header "boost/spirit/include/karma_generate_auto.hpp"
	header "boost/spirit/include/support.hpp"
	header "boost/spirit/include/karma_verbatim.hpp"
	header "boost/spirit/include/classic_spirit.hpp"
	header "boost/spirit/include/classic_regex.hpp"
	header "boost/spirit/include/classic_parser_traits.hpp"
	header "boost/spirit/include/karma_lazy.hpp"
	header "boost/spirit/include/qi_raw.hpp"
	header "boost/spirit/include/qi_numeric.hpp"
	header "boost/spirit/include/phoenix1_new.hpp"
	header "boost/spirit/include/support_modify.hpp"
	header "boost/spirit/include/classic_ref_value_actor.hpp"
	header "boost/spirit/include/classic_functor_parser.hpp"
	header "boost/spirit/include/qi_real.hpp"
	header "boost/spirit/include/classic_tree_to_xml.hpp"
	header "boost/spirit/include/qi_hold.hpp"
	header "boost/spirit/include/classic_decrement_actor.hpp"
	header "boost/spirit/include/classic_assert.hpp"
	header "boost/spirit/include/support_standard.hpp"
	header "boost/spirit/include/karma_format_attr.hpp"
	header "boost/spirit/include/lex_lexertl_position_token.hpp"
	header "boost/spirit/include/phoenix1_casts.hpp"
	header "boost/spirit/include/classic_assign_key_actor.hpp"
	header "boost/spirit/include/classic_version.hpp"
	header "boost/spirit/include/classic_position_iterator_fwd.hpp"
	header "boost/spirit/include/qi_uint.hpp"
	header "boost/spirit/include/classic_parse_tree_fwd.hpp"
	header "boost/spirit/include/qi_kleene.hpp"
	header "boost/spirit/include/classic_scoped_lock.hpp"
	header "boost/spirit/include/classic_directives.hpp"
	header "boost/spirit/include/support_ostream_iterator.hpp"
	header "boost/spirit/include/qi_permutation.hpp"
	header "boost/spirit/include/phoenix_bind.hpp"
	header "boost/spirit/include/classic_scanner.hpp"
	header "boost/spirit/include/karma_char.hpp"
	header "boost/spirit/include/classic_scanner_fwd.hpp"
	header "boost/spirit/include/classic_dynamic.hpp"
	header "boost/spirit/include/classic_exclusive_or.hpp"
	header "boost/spirit/include/qi_stream.hpp"
	header "boost/spirit/include/phoenix_stl.hpp"
	header "boost/spirit/include/classic_skipper_fwd.hpp"
	header "boost/spirit/include/phoenix_core.hpp"
	header "boost/spirit/include/qi_matches.hpp"
	header "boost/spirit/include/lex_lexertl_token.hpp"
	header "boost/spirit/include/karma_generate.hpp"
	header "boost/spirit/include/phoenix_version.hpp"
	header "boost/spirit/include/classic_exceptions_fwd.hpp"
	header "boost/spirit/include/classic_parse_tree.hpp"
	header "boost/spirit/include/phoenix_container.hpp"
	header "boost/spirit/include/classic_loops.hpp"
	header "boost/spirit/include/classic_confix.hpp"
	header "boost/spirit/include/classic_basic_chset.hpp"
	header "boost/spirit/include/qi_optional.hpp"
	header "boost/spirit/include/classic_nil.hpp"
	header "boost/spirit/include/karma_format.hpp"
	header "boost/spirit/include/support_utree.hpp"
	header "boost/spirit/include/karma_as.hpp"
	header "boost/spirit/include/karma.hpp"
	header "boost/spirit/include/classic_switch.hpp"
	header "boost/spirit/include/qi_list.hpp"
	header "boost/spirit/include/support_any_if_ns_so.hpp"
	header "boost/spirit/include/qi_skip.hpp"
	header "boost/spirit/include/qi_and_predicate.hpp"
	header "boost/spirit/include/classic_primitives.hpp"
	header "boost/spirit/include/classic_range_run.hpp"
	header "boost/spirit/include/phoenix_function.hpp"
	header "boost/spirit/include/qi_operator.hpp"
	header "boost/spirit/include/support_any_ns_so.hpp"
	header "boost/spirit/include/qi_repeat.hpp"
	header "boost/spirit/include/classic_position_iterator.hpp"
	header "boost/spirit/include/classic_subrule.hpp"
	header "boost/spirit/include/support_iso8859_1.hpp"
	header "boost/spirit/include/support_any_if.hpp"
	header "boost/spirit/include/support_argument.hpp"
	header "boost/spirit/include/karma_phoenix_attributes.hpp"
	header "boost/spirit/include/support_info.hpp"
	header "boost/spirit/include/karma_numeric.hpp"
	header "boost/spirit/include/phoenix1_primitives.hpp"
	header "boost/spirit/include/phoenix_algorithm.hpp"
	header "boost/spirit/include/qi_auto.hpp"
	header "boost/spirit/include/qi_plus.hpp"
	header "boost/spirit/include/qi_eps.hpp"
	header "boost/spirit/include/qi_as_string.hpp"
	header "boost/spirit/include/classic_as_parser.hpp"
	header "boost/spirit/include/phoenix1_closures.hpp"
	header "boost/spirit/include/support_auto.hpp"
	header "boost/spirit/include/qi_expect.hpp"
	header "boost/spirit/include/classic_debug.hpp"
	header "boost/spirit/include/classic_multi_pass.hpp"
	header "boost/spirit/include/qi_omit.hpp"
	header "boost/spirit/include/support_any_ns.hpp"
	header "boost/spirit/include/classic_common.hpp"
	header "boost/spirit/include/classic_parser_id.hpp"
	header "boost/spirit/include/classic_common_fwd.hpp"
	header "boost/spirit/include/classic_intersection.hpp"
	header "boost/spirit/include/phoenix1_binders.hpp"
	header "boost/spirit/include/qi.hpp"
	header "boost/spirit/include/qi_domain.hpp"
	header "boost/spirit/include/support_attributes.hpp"
	header "boost/spirit/include/karma_no_delimit.hpp"
	header "boost/spirit/include/lex.hpp"
	header "boost/spirit/include/lex_tokenize_and_parse.hpp"
	header "boost/spirit/include/classic_difference.hpp"
	header "boost/spirit/include/support_istream_iterator.hpp"
	header "boost/spirit/include/qi_parse_auto.hpp"
	header "boost/spirit/include/lex_domain.hpp"
	header "boost/spirit/include/qi_sequential_or.hpp"
	header "boost/spirit/include/classic_multi_pass_fwd.hpp"
	header "boost/spirit/include/lex_generate_static_lexertl.hpp"
	header "boost/spirit/include/classic_operators.hpp"
	header "boost/spirit/include/lex_char_token_def.hpp"
	header "boost/spirit/include/classic_select.hpp"
	header "boost/spirit/include/qi_lexeme.hpp"
	header "boost/spirit/include/karma_sequence.hpp"
	header "boost/spirit/include/lex_static_lexertl.hpp"
	header "boost/spirit/include/classic_core.hpp"
	header "boost/spirit/include/qi_match_attr.hpp"
	header "boost/spirit/include/classic_assign_actor.hpp"
	header "boost/spirit/include/phoenix1_special_ops.hpp"
	header "boost/spirit/include/classic_stored_rule_fwd.hpp"
	header "boost/spirit/include/karma_buffer.hpp"
	header "boost/spirit/include/classic_for.hpp"
	header "boost/spirit/include/phoenix1_operators.hpp"
	header "boost/spirit/include/classic_fixed_size_queue.hpp"
	header "boost/spirit/include/karma_directive.hpp"
	header "boost/spirit/include/classic_rule_alias.hpp"
	header "boost/spirit/include/qi_action.hpp"
	header "boost/spirit/include/classic_closure_fwd.hpp"
	header "boost/spirit/include/classic_minimal.hpp"
	header "boost/spirit/include/support_char_class.hpp"
	header "boost/spirit/include/support_extended_variant.hpp"
	header "boost/spirit/include/karma_not_predicate.hpp"
	header "boost/spirit/include/classic_typeof.hpp"
	header "boost/spirit/include/support_any_if_ns.hpp"
	header "boost/spirit/include/karma_binary.hpp"
	header "boost/spirit/include/karma_eps.hpp"
	header "boost/spirit/include/classic_sequence.hpp"
	header "boost/spirit/include/qi_as.hpp"
	header "boost/spirit/include/karma_string.hpp"
	header "boost/spirit/include/classic_epsilon.hpp"
	header "boost/spirit/include/support_multi_pass.hpp"
	header "boost/spirit/include/karma_strict_relaxed.hpp"
	header "boost/spirit/include/classic.hpp"
	header "boost/spirit/include/classic_lazy.hpp"
	header "boost/spirit/include/qi_rule.hpp"
	header "boost/spirit/include/classic_parser_context.hpp"
	header "boost/spirit/include/qi_bool.hpp"
	header "boost/spirit/include/qi_no_skip.hpp"
	header "boost/spirit/include/classic_match.hpp"
	header "boost/spirit/include/karma_grammar.hpp"
	header "boost/spirit/include/karma_optional.hpp"
	header "boost/spirit/include/phoenix1_tuple_helpers.hpp"
	header "boost/spirit/include/classic_clear_actor.hpp"
	header "boost/spirit/include/version.hpp"
	header "boost/spirit/include/karma_operator.hpp"
	header "boost/spirit/include/karma_generate_attr.hpp"
	header "boost/spirit/include/classic_escape_char_fwd.hpp"
	header "boost/spirit/include/qi_char.hpp"
	header "boost/spirit/include/lex_tokenize_and_parse_attr.hpp"
	header "boost/spirit/include/classic_sequential_or.hpp"
	header "boost/spirit/include/classic_ast.hpp"
	header "boost/spirit/include/classic_ref_actor.hpp"
	header "boost/spirit/include/support_locals.hpp"
	header "boost/spirit/include/karma_uint.hpp"
	header "boost/spirit/include/qi_difference.hpp"
	header "boost/spirit/include/lex_lexertl.hpp"
	header "boost/spirit/include/qi_char_class.hpp"
	header "boost/spirit/include/classic_attribute.hpp"
	header "boost/spirit/include/classic_symbols_fwd.hpp"
	header "boost/spirit/include/support_attributes_fwd.hpp"
	header "boost/spirit/include/phoenix1_composite.hpp"
	header "boost/spirit/include/karma_left_alignment.hpp"
	header "boost/spirit/include/classic_ast_fwd.hpp"
	header "boost/spirit/include/classic_ref_const_ref_value_actor.hpp"
	header "boost/spirit/include/classic_if.hpp"
	header "boost/spirit/include/karma_columns.hpp"
	header "boost/spirit/include/classic_static.hpp"
	header "boost/spirit/include/classic_ref_const_ref_const_ref_a.hpp"
	header "boost/spirit/include/karma_format_auto.hpp"
	header "boost/spirit/include/classic_lists.hpp"
	header "boost/spirit/include/classic_push_back_actor.hpp"
	header "boost/spirit/include/karma_list.hpp"
	header "boost/spirit/include/classic_no_actions.hpp"
	header "boost/spirit/include/classic_parametric.hpp"
	header "boost/spirit/include/qi_parse.hpp"
	header "boost/spirit/include/qi_char_.hpp"
	header "boost/spirit/include/classic_skipper.hpp"
	header "boost/spirit/include/classic_exceptions.hpp"
	header "boost/spirit/include/classic_kleene_star.hpp"
	header "boost/spirit/include/karma_char_class.hpp"
	header "boost/spirit/include/qi_what.hpp"
	header "boost/spirit/include/classic_composite.hpp"
	header "boost/spirit/include/karma_char_.hpp"
	header "boost/spirit/include/karma_symbols.hpp"
	header "boost/spirit/include/phoenix_scope.hpp"
	header "boost/spirit/include/classic_actions.hpp"
	header "boost/spirit/include/classic_rule_parser.hpp"
	header "boost/spirit/include/qi_core.hpp"
	header "boost/spirit/include/classic_parser.hpp"
	header "boost/spirit/include/classic_debug_node.hpp"
	header "boost/spirit/include/phoenix_object.hpp"
	header "boost/spirit/include/classic_error_handling.hpp"
	header "boost/spirit/include/qi_alternative.hpp"
	header "boost/spirit/include/classic_push_front_actor.hpp"
	header "boost/spirit/include/phoenix_statement.hpp"
	header "boost/spirit/include/classic_subrule_fwd.hpp"
	header "boost/spirit/include/karma_repeat.hpp"
	header "boost/spirit/include/classic_optional.hpp"
	header "boost/spirit/include/classic_insert_at_actor.hpp"
	header "boost/spirit/include/karma_kleene.hpp"
	header "boost/spirit/include/karma_and_predicate.hpp"
	header "boost/spirit/include/support_multi_pass_fwd.hpp"
	header "boost/spirit/include/karma_real.hpp"
	header "boost/spirit/include/classic_confix_fwd.hpp"
	header "boost/spirit/include/karma_upper_lower_case.hpp"
	header "boost/spirit/include/qi_copy.hpp"
	header "boost/spirit/include/classic_actor.hpp"
	header "boost/spirit/include/phoenix_limits.hpp"
	header "boost/spirit/include/classic_chset_operators.hpp"
	header "boost/spirit/include/karma_stream.hpp"
	header "boost/spirit/include/classic_rule.hpp"
	header "boost/spirit/include/qi_lazy.hpp"
	header "boost/spirit/include/classic_closure_context.hpp"
	header "boost/spirit/include/classic_utility.hpp"
	header "boost/spirit/include/classic_closure.hpp"
	header "boost/spirit/include/karma_alternative.hpp"
	header "boost/spirit/include/qi_directive.hpp"
	header "boost/spirit/include/karma_right_alignment.hpp"
	header "boost/spirit/include/classic_swap_actor.hpp"
	header "boost/spirit/include/classic_flush_multi_pass.hpp"
	header "boost/spirit/include/karma_domain.hpp"
	header "boost/spirit/include/classic_positive.hpp"
	header "boost/spirit/include/qi_attr.hpp"
	header "boost/spirit/include/qi_eol.hpp"
	header "boost/spirit/include/classic_insert_key_actor.hpp"
	header "boost/spirit/include/classic_file_iterator_fwd.hpp"
	header "boost/spirit/include/qi_match.hpp"
	header "boost/spirit/include/phoenix1_functions.hpp"
	header "boost/spirit/include/classic_sequential_and.hpp"
	header "boost/spirit/include/karma_delimit.hpp"
	header "boost/spirit/include/classic_symbols.hpp"
	header "boost/spirit/include/classic_increment_actor.hpp"
	header "boost/spirit/include/qi_no_case.hpp"
	header "boost/spirit/include/classic_fundamental.hpp"
	header "boost/spirit/include/karma_int.hpp"
	header "boost/spirit/include/qi_parse_attr.hpp"
	header "boost/spirit/include/classic_distinct_fwd.hpp"
	header "boost/spirit/include/karma_bool.hpp"
	header "boost/spirit/include/classic_numerics.hpp"
	header "boost/spirit/include/karma_maxwidth.hpp"
	header "boost/spirit/include/classic_file_iterator.hpp"
	header "boost/spirit/include/karma_rule.hpp"
	header "boost/spirit/include/classic_safe_bool.hpp"
	header "boost/spirit/include/qi_attr_cast.hpp"
	header "boost/spirit/include/lex_lexer.hpp"
	header "boost/spirit/include/qi_grammar.hpp"
	header "boost/spirit/include/karma_auxiliary.hpp"
	header "boost/spirit/include/support_line_pos_iterator.hpp"
	header "boost/spirit/include/classic_refactoring.hpp"
	header "boost/spirit/include/phoenix1_tuples.hpp"
	header "boost/spirit/include/classic_iterator.hpp"
	header "boost/spirit/include/classic_erase_actor.hpp"
	header "boost/spirit/include/qi_binary.hpp"
	header "boost/spirit/include/classic_config.hpp"
	header "boost/spirit/include/phoenix1_actor.hpp"
	header "boost/spirit/include/karma_omit.hpp"
	header "boost/spirit/include/classic_lists_fwd.hpp"
	header "boost/spirit/include/classic_grammar_def.hpp"
	header "boost/spirit/include/qi_string.hpp"
	header "boost/spirit/include/qi_lit.hpp"
	header "boost/spirit/include/classic_numerics_fwd.hpp"
	header "boost/spirit/include/qi_not_predicate.hpp"
	header "boost/spirit/include/classic_meta.hpp"
	header "boost/spirit/include/qi_match_auto.hpp"
	header "boost/spirit/include/qi_int.hpp"
	header "boost/spirit/include/phoenix_operator.hpp"
	header "boost/spirit/include/karma_plus.hpp"
	header "boost/spirit/include/phoenix.hpp"
	header "boost/spirit/include/support_container.hpp"
	header "boost/spirit/include/support_adapt_adt_attributes.hpp"
	header "boost/spirit/include/phoenix_fusion.hpp"
	header "boost/spirit/include/karma_auto.hpp"
	header "boost/spirit/include/classic_stored_rule.hpp"
	header "boost/spirit/include/karma_nonterminal.hpp"
	header "boost/spirit/include/classic_grammar.hpp"
	header "boost/spirit/include/qi_sequence.hpp"
	header "boost/spirit/include/lex_plain_token.hpp"
	header "boost/spirit/include/karma_duplicate.hpp"
	header "boost/spirit/include/classic_parser_names.hpp"
	header "boost/spirit/include/classic_list.hpp"
	header "boost/spirit/include/karma_eol.hpp"
	header "boost/spirit/include/qi_eoi.hpp"
	header "boost/spirit/include/qi_symbols.hpp"
	header "boost/spirit/include/classic_while.hpp"
	header "boost/spirit/include/support_look_ahead.hpp"
	header "boost/spirit/include/support_standard_wide.hpp"
	header "boost/spirit/include/classic_grammar_def_fwd.hpp"
	header "boost/spirit/include/phoenix1_statements.hpp"
	header "boost/spirit/include/qi_nonterminal.hpp"
	header "boost/spirit/include/support_unused.hpp"
	header "boost/spirit/include/classic_traverse.hpp"
	header "boost/spirit/include/karma_action.hpp"
	header "boost/spirit/include/support_ascii.hpp"
	header "boost/spirit/include/karma_center_alignment.hpp"
	header "boost/spirit/version.hpp"
	header "boost/spirit.hpp"
	export *
}