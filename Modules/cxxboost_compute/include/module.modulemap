module cxxboost_compute [system] {
	header "boost/compute.hpp"
	header "boost/compute/cl.hpp"
	header "boost/compute/event.hpp"
	header "boost/compute/container.hpp"
	header "boost/compute/experimental/tabulate.hpp"
	header "boost/compute/experimental/sort_by_transform.hpp"
	header "boost/compute/experimental/malloc.hpp"
	header "boost/compute/experimental/clamp_range.hpp"
	header "boost/compute/command_queue.hpp"
	header "boost/compute/types/builtin.hpp"
	header "boost/compute/types/pair.hpp"
	header "boost/compute/types/complex.hpp"
	header "boost/compute/types/size_t.hpp"
	header "boost/compute/types/tuple.hpp"
	header "boost/compute/types/fundamental.hpp"
	header "boost/compute/types/struct.hpp"
	header "boost/compute/utility.hpp"
	header "boost/compute/closure.hpp"
	header "boost/compute/memory/svm_ptr.hpp"
	header "boost/compute/memory/local_buffer.hpp"
	header "boost/compute/svm.hpp"
	header "boost/compute/async.hpp"
	header "boost/compute/function.hpp"
	header "boost/compute/cl_ext.hpp"
	header "boost/compute/interop/opencv.hpp"
	header "boost/compute/interop/opengl.hpp"
	header "boost/compute/interop/eigen.hpp"
	header "boost/compute/interop/qt/qtgui.hpp"
	header "boost/compute/interop/qt/qpoint.hpp"
	header "boost/compute/interop/qt/qvector.hpp"
	header "boost/compute/interop/qt/qtcore.hpp"
	header "boost/compute/interop/qt/qimage.hpp"
	header "boost/compute/interop/qt/qpointf.hpp"
	header "boost/compute/interop/eigen/core.hpp"
	header "boost/compute/interop/qt.hpp"
	header "boost/compute/interop/opencv/highgui.hpp"
	header "boost/compute/interop/opencv/ocl.hpp"
	header "boost/compute/interop/opencv/core.hpp"
	header "boost/compute/interop/vtk/bounds.hpp"
	header "boost/compute/interop/vtk/points.hpp"
	header "boost/compute/interop/vtk/data_array.hpp"
	header "boost/compute/interop/vtk/matrix4x4.hpp"
	header "boost/compute/interop/vtk.hpp"
	header "boost/compute/interop/opengl/opengl_texture.hpp"
	header "boost/compute/interop/opengl/acquire.hpp"
	header "boost/compute/interop/opengl/opengl_buffer.hpp"
	header "boost/compute/interop/opengl/cl_gl_ext.hpp"
	header "boost/compute/interop/opengl/cl_gl.hpp"
	header "boost/compute/interop/opengl/context.hpp"
	header "boost/compute/interop/opengl/gl.hpp"
	header "boost/compute/interop/opengl/opengl_renderbuffer.hpp"
	header "boost/compute/image_format.hpp"
	header "boost/compute/type_traits/scalar_type.hpp"
	header "boost/compute/type_traits/vector_size.hpp"
	header "boost/compute/type_traits/type_name.hpp"
	header "boost/compute/type_traits/common_type.hpp"
	header "boost/compute/type_traits/detail/capture_traits.hpp"
	header "boost/compute/type_traits/is_fundamental.hpp"
	header "boost/compute/type_traits/make_vector_type.hpp"
	header "boost/compute/type_traits/result_of.hpp"
	header "boost/compute/type_traits/type_definition.hpp"
	header "boost/compute/type_traits/is_device_iterator.hpp"
	header "boost/compute/type_traits/is_vector_type.hpp"
	header "boost/compute/async/wait_guard.hpp"
	header "boost/compute/async/future.hpp"
	header "boost/compute/async/wait.hpp"
	header "boost/compute/memory_object.hpp"
	header "boost/compute/allocator.hpp"
	header "boost/compute/config.hpp"
	header "boost/compute/algorithm.hpp"
	header "boost/compute/system.hpp"
	header "boost/compute/platform.hpp"
	header "boost/compute/algorithm/max_element.hpp"
	header "boost/compute/algorithm/minmax_element.hpp"
	header "boost/compute/algorithm/set_intersection.hpp"
	header "boost/compute/algorithm/remove_if.hpp"
	header "boost/compute/algorithm/nth_element.hpp"
	header "boost/compute/algorithm/sort_by_key.hpp"
	header "boost/compute/algorithm/any_of.hpp"
	header "boost/compute/algorithm/for_each_n.hpp"
	header "boost/compute/algorithm/reduce.hpp"
	header "boost/compute/algorithm/upper_bound.hpp"
	header "boost/compute/algorithm/find_if_not.hpp"
	header "boost/compute/algorithm/set_difference.hpp"
	header "boost/compute/algorithm/fill_n.hpp"
	header "boost/compute/algorithm/random_shuffle.hpp"
	header "boost/compute/algorithm/accumulate.hpp"
	header "boost/compute/algorithm/stable_partition.hpp"
	header "boost/compute/algorithm/equal_range.hpp"
	header "boost/compute/algorithm/transform_reduce.hpp"
	header "boost/compute/algorithm/generate.hpp"
	header "boost/compute/algorithm/swap_ranges.hpp"
	header "boost/compute/algorithm/transform_if.hpp"
	header "boost/compute/algorithm/equal.hpp"
	header "boost/compute/algorithm/is_sorted.hpp"
	header "boost/compute/algorithm/rotate.hpp"
	header "boost/compute/algorithm/adjacent_find.hpp"
	header "boost/compute/algorithm/lower_bound.hpp"
	header "boost/compute/algorithm/unique.hpp"
	header "boost/compute/algorithm/partition.hpp"
	header "boost/compute/algorithm/transform.hpp"
	header "boost/compute/algorithm/scatter_if.hpp"
	header "boost/compute/algorithm/set_symmetric_difference.hpp"
	header "boost/compute/algorithm/search.hpp"
	header "boost/compute/algorithm/binary_search.hpp"
	header "boost/compute/algorithm/reverse_copy.hpp"
	header "boost/compute/algorithm/stable_sort.hpp"
	header "boost/compute/algorithm/find_if.hpp"
	header "boost/compute/algorithm/replace.hpp"
	header "boost/compute/algorithm/min_element.hpp"
	header "boost/compute/algorithm/copy_if.hpp"
	header "boost/compute/algorithm/rotate_copy.hpp"
	header "boost/compute/algorithm/merge.hpp"
	header "boost/compute/algorithm/detail/copy_to_host.hpp"
	header "boost/compute/algorithm/detail/inplace_reduce.hpp"
	header "boost/compute/algorithm/detail/random_fill.hpp"
	header "boost/compute/algorithm/detail/balanced_path.hpp"
	header "boost/compute/algorithm/detail/count_if_with_reduce.hpp"
	header "boost/compute/algorithm/detail/serial_reduce_by_key.hpp"
	header "boost/compute/algorithm/detail/count_if_with_ballot.hpp"
	header "boost/compute/algorithm/detail/merge_sort_on_gpu.hpp"
	header "boost/compute/algorithm/detail/find_extrema.hpp"
	header "boost/compute/algorithm/detail/serial_accumulate.hpp"
	header "boost/compute/algorithm/detail/compact.hpp"
	header "boost/compute/algorithm/detail/merge_sort_on_cpu.hpp"
	header "boost/compute/algorithm/detail/serial_merge.hpp"
	header "boost/compute/algorithm/detail/merge_path.hpp"
	header "boost/compute/algorithm/detail/reduce_by_key_with_scan.hpp"
	header "boost/compute/algorithm/detail/count_if_with_threads.hpp"
	header "boost/compute/algorithm/detail/search_all.hpp"
	header "boost/compute/algorithm/detail/find_extrema_with_atomics.hpp"
	header "boost/compute/algorithm/detail/radix_sort.hpp"
	header "boost/compute/algorithm/detail/serial_find_extrema.hpp"
	header "boost/compute/algorithm/detail/binary_find.hpp"
	header "boost/compute/algorithm/detail/find_if_with_atomics.hpp"
	header "boost/compute/algorithm/detail/copy_on_device.hpp"
	header "boost/compute/algorithm/detail/find_extrema_with_reduce.hpp"
	header "boost/compute/algorithm/detail/insertion_sort.hpp"
	header "boost/compute/algorithm/detail/serial_scan.hpp"
	header "boost/compute/algorithm/detail/scan_on_cpu.hpp"
	header "boost/compute/algorithm/detail/reduce_on_cpu.hpp"
	header "boost/compute/algorithm/detail/scan_on_gpu.hpp"
	header "boost/compute/algorithm/detail/reduce_on_gpu.hpp"
	header "boost/compute/algorithm/detail/copy_to_device.hpp"
	header "boost/compute/algorithm/detail/serial_count_if.hpp"
	header "boost/compute/algorithm/detail/scan.hpp"
	header "boost/compute/algorithm/detail/reduce_by_key.hpp"
	header "boost/compute/algorithm/detail/serial_reduce.hpp"
	header "boost/compute/algorithm/detail/merge_with_merge_path.hpp"
	header "boost/compute/algorithm/detail/find_extrema_on_cpu.hpp"
	header "boost/compute/algorithm/exclusive_scan.hpp"
	header "boost/compute/algorithm/find.hpp"
	header "boost/compute/algorithm/fill.hpp"
	header "boost/compute/algorithm/lexicographical_compare.hpp"
	header "boost/compute/algorithm/replace_copy.hpp"
	header "boost/compute/algorithm/includes.hpp"
	header "boost/compute/algorithm/is_partitioned.hpp"
	header "boost/compute/algorithm/mismatch.hpp"
	header "boost/compute/algorithm/reverse.hpp"
	header "boost/compute/algorithm/sort.hpp"
	header "boost/compute/algorithm/remove.hpp"
	header "boost/compute/algorithm/adjacent_difference.hpp"
	header "boost/compute/algorithm/for_each.hpp"
	header "boost/compute/algorithm/count.hpp"
	header "boost/compute/algorithm/generate_n.hpp"
	header "boost/compute/algorithm/partition_copy.hpp"
	header "boost/compute/algorithm/iota.hpp"
	header "boost/compute/algorithm/inclusive_scan.hpp"
	header "boost/compute/algorithm/partial_sum.hpp"
	header "boost/compute/algorithm/is_permutation.hpp"
	header "boost/compute/algorithm/find_end.hpp"
	header "boost/compute/algorithm/search_n.hpp"
	header "boost/compute/algorithm/scatter.hpp"
	header "boost/compute/algorithm/copy_n.hpp"
	header "boost/compute/algorithm/none_of.hpp"
	header "boost/compute/algorithm/inplace_merge.hpp"
	header "boost/compute/algorithm/unique_copy.hpp"
	header "boost/compute/algorithm/set_union.hpp"
	header "boost/compute/algorithm/copy.hpp"
	header "boost/compute/algorithm/next_permutation.hpp"
	header "boost/compute/algorithm/inner_product.hpp"
	header "boost/compute/algorithm/all_of.hpp"
	header "boost/compute/algorithm/partition_point.hpp"
	header "boost/compute/algorithm/gather.hpp"
	header "boost/compute/algorithm/reduce_by_key.hpp"
	header "boost/compute/algorithm/count_if.hpp"
	header "boost/compute/algorithm/stable_sort_by_key.hpp"
	header "boost/compute/algorithm/prev_permutation.hpp"
	header "boost/compute/functional.hpp"
	header "boost/compute/image/image_object.hpp"
	header "boost/compute/image/image_format.hpp"
	header "boost/compute/image/image1d.hpp"
	header "boost/compute/image/image2d.hpp"
	header "boost/compute/image/image3d.hpp"
	header "boost/compute/image/image_sampler.hpp"
	header "boost/compute/type_traits.hpp"
	header "boost/compute/version.hpp"
	header "boost/compute/image2d.hpp"
	header "boost/compute/context.hpp"
	header "boost/compute/random.hpp"
	header "boost/compute/container/flat_map.hpp"
	header "boost/compute/container/array.hpp"
	header "boost/compute/container/vector.hpp"
	header "boost/compute/container/dynamic_bitset.hpp"
	header "boost/compute/container/mapped_view.hpp"
	header "boost/compute/container/detail/scalar.hpp"
	header "boost/compute/container/valarray.hpp"
	header "boost/compute/container/string.hpp"
	header "boost/compute/container/basic_string.hpp"
	header "boost/compute/container/stack.hpp"
	header "boost/compute/container/flat_set.hpp"
	header "boost/compute/wait_list.hpp"
	header "boost/compute/iterator/buffer_iterator.hpp"
	header "boost/compute/iterator/transform_iterator.hpp"
	header "boost/compute/iterator/constant_iterator.hpp"
	header "boost/compute/iterator/function_input_iterator.hpp"
	header "boost/compute/iterator/detail/get_base_iterator_buffer.hpp"
	header "boost/compute/iterator/detail/swizzle_iterator.hpp"
	header "boost/compute/iterator/zip_iterator.hpp"
	header "boost/compute/iterator/permutation_iterator.hpp"
	header "boost/compute/iterator/discard_iterator.hpp"
	header "boost/compute/iterator/counting_iterator.hpp"
	header "boost/compute/iterator/constant_buffer_iterator.hpp"
	header "boost/compute/iterator/strided_iterator.hpp"
	header "boost/compute/detail/diagnostic.hpp"
	header "boost/compute/detail/is_buffer_iterator.hpp"
	header "boost/compute/detail/literal.hpp"
	header "boost/compute/detail/global_static.hpp"
	header "boost/compute/detail/buffer_value.hpp"
	header "boost/compute/detail/meta_kernel.hpp"
	header "boost/compute/detail/get_object_info.hpp"
	header "boost/compute/detail/mpl_vector_to_tuple.hpp"
	header "boost/compute/detail/vendor.hpp"
	header "boost/compute/detail/variadic_macros.hpp"
	header "boost/compute/detail/path.hpp"
	header "boost/compute/detail/cl_versions.hpp"
	header "boost/compute/detail/iterator_range_size.hpp"
	header "boost/compute/detail/sha1.hpp"
	header "boost/compute/detail/nvidia_compute_capability.hpp"
	header "boost/compute/detail/parameter_cache.hpp"
	header "boost/compute/detail/iterator_traits.hpp"
	header "boost/compute/detail/device_ptr.hpp"
	header "boost/compute/detail/lru_cache.hpp"
	header "boost/compute/detail/read_write_single_value.hpp"
	header "boost/compute/detail/print_range.hpp"
	header "boost/compute/detail/getenv.hpp"
	header "boost/compute/detail/work_size.hpp"
	header "boost/compute/detail/duration.hpp"
	header "boost/compute/detail/iterator_plus_distance.hpp"
	header "boost/compute/detail/is_contiguous_iterator.hpp"
	header "boost/compute/detail/assert_cl_success.hpp"
	header "boost/compute/device.hpp"
	header "boost/compute/allocator/pinned_allocator.hpp"
	header "boost/compute/allocator/buffer_allocator.hpp"
	header "boost/compute/lambda/get.hpp"
	header "boost/compute/lambda/make_tuple.hpp"
	header "boost/compute/lambda/functional.hpp"
	header "boost/compute/lambda/context.hpp"
	header "boost/compute/lambda/placeholders.hpp"
	header "boost/compute/lambda/placeholder.hpp"
	header "boost/compute/lambda/make_pair.hpp"
	header "boost/compute/lambda/result_of.hpp"
	header "boost/compute/lambda.hpp"
	header "boost/compute/image3d.hpp"
	header "boost/compute/buffer.hpp"
	header "boost/compute/user_event.hpp"
	header "boost/compute/memory.hpp"
	header "boost/compute/random/mersenne_twister_engine.hpp"
	header "boost/compute/random/uniform_real_distribution.hpp"
	header "boost/compute/random/default_random_engine.hpp"
	header "boost/compute/random/threefry_engine.hpp"
	header "boost/compute/random/discrete_distribution.hpp"
	header "boost/compute/random/bernoulli_distribution.hpp"
	header "boost/compute/random/normal_distribution.hpp"
	header "boost/compute/random/linear_congruential_engine.hpp"
	header "boost/compute/random/uniform_int_distribution.hpp"
	header "boost/compute/source.hpp"
	header "boost/compute/program.hpp"
	header "boost/compute/pipe.hpp"
	header "boost/compute/types.hpp"
	header "boost/compute/exception/program_build_failure.hpp"
	header "boost/compute/exception/no_device_found.hpp"
	header "boost/compute/exception/opencl_error.hpp"
	header "boost/compute/exception/unsupported_extension_error.hpp"
	header "boost/compute/exception/context_error.hpp"
	header "boost/compute/iterator.hpp"
	header "boost/compute/image.hpp"
	header "boost/compute/functional/as.hpp"
	header "boost/compute/functional/integer.hpp"
	header "boost/compute/functional/hash.hpp"
	header "boost/compute/functional/logical.hpp"
	header "boost/compute/functional/get.hpp"
	header "boost/compute/functional/atomic.hpp"
	header "boost/compute/functional/field.hpp"
	header "boost/compute/functional/math.hpp"
	header "boost/compute/functional/operator.hpp"
	header "boost/compute/functional/detail/macros.hpp"
	header "boost/compute/functional/detail/unpack.hpp"
	header "boost/compute/functional/detail/nvidia_popcount.hpp"
	header "boost/compute/functional/detail/nvidia_ballot.hpp"
	header "boost/compute/functional/relational.hpp"
	header "boost/compute/functional/identity.hpp"
	header "boost/compute/functional/common.hpp"
	header "boost/compute/functional/popcount.hpp"
	header "boost/compute/functional/geometry.hpp"
	header "boost/compute/functional/bind.hpp"
	header "boost/compute/functional/convert.hpp"
	header "boost/compute/kernel.hpp"
	header "boost/compute/core.hpp"
	header "boost/compute/exception.hpp"
	header "boost/compute/utility/invoke.hpp"
	header "boost/compute/utility/wait_list.hpp"
	header "boost/compute/utility/dim.hpp"
	header "boost/compute/utility/extents.hpp"
	header "boost/compute/utility/source.hpp"
	header "boost/compute/utility/program_cache.hpp"
	header "boost/compute/image_sampler.hpp"
	export *
}