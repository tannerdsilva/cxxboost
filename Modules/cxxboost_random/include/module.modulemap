module cxxboost_random [system] {
	header "boost/nondet_random.hpp"
	header "boost/random.hpp"
	header "boost/random/mersenne_twister.hpp"
	header "boost/random/xor_combine.hpp"
	header "boost/random/gamma_distribution.hpp"
	header "boost/random/random_device.hpp"
	header "boost/random/uniform_real_distribution.hpp"
	header "boost/random/negative_binomial_distribution.hpp"
	header "boost/random/poisson_distribution.hpp"
	header "boost/random/uniform_real.hpp"
	header "boost/random/uniform_01.hpp"
	header "boost/random/geometric_distribution.hpp"
	header "boost/random/random_number_generator.hpp"
	header "boost/random/shuffle_order.hpp"
	header "boost/random/additive_combine.hpp"
	header "boost/random/traits.hpp"
	header "boost/random/linear_feedback_shift.hpp"
	header "boost/random/discrete_distribution.hpp"
	header "boost/random/uniform_smallint.hpp"
	header "boost/random/lognormal_distribution.hpp"
	header "boost/random/inversive_congruential.hpp"
	header "boost/random/sobol.hpp"
	header "boost/random/exponential_distribution.hpp"
	header "boost/random/fisher_f_distribution.hpp"
	header "boost/random/hyperexponential_distribution.hpp"
	header "boost/random/discard_block.hpp"
	header "boost/random/lagged_fibonacci.hpp"
	header "boost/random/seed_seq.hpp"
	header "boost/random/weibull_distribution.hpp"
	header "boost/random/variate_generator.hpp"
	header "boost/random/detail/const_mod.hpp"
	header "boost/random/detail/qrng_base.hpp"
	header "boost/random/detail/polynomial.hpp"
	header "boost/random/detail/vector_io.hpp"
	header "boost/random/detail/generator_bits.hpp"
	header "boost/random/detail/int_float_pair.hpp"
	header "boost/random/detail/sobol_table.hpp"
	header "boost/random/detail/config.hpp"
	header "boost/random/detail/seed.hpp"
	header "boost/random/detail/gray_coded_qrng.hpp"
	header "boost/random/detail/disable_warnings.hpp"
	header "boost/random/detail/auto_link.hpp"
	header "boost/random/detail/ptr_helper.hpp"
	header "boost/random/detail/signed_unsigned_tools.hpp"
	header "boost/random/detail/operators.hpp"
	header "boost/random/detail/iterator_mixin.hpp"
	header "boost/random/detail/uniform_int_float.hpp"
	header "boost/random/detail/niederreiter_base2_table.hpp"
	header "boost/random/detail/integer_log2.hpp"
	header "boost/random/detail/generator_seed_seq.hpp"
	header "boost/random/detail/enable_warnings.hpp"
	header "boost/random/detail/large_arithmetic.hpp"
	header "boost/random/detail/seed_impl.hpp"
	header "boost/random/bernoulli_distribution.hpp"
	header "boost/random/piecewise_constant_distribution.hpp"
	header "boost/random/extreme_value_distribution.hpp"
	header "boost/random/non_central_chi_squared_distribution.hpp"
	header "boost/random/binomial_distribution.hpp"
	header "boost/random/uniform_int.hpp"
	header "boost/random/taus88.hpp"
	header "boost/random/piecewise_linear_distribution.hpp"
	header "boost/random/ranlux.hpp"
	header "boost/random/generate_canonical.hpp"
	header "boost/random/student_t_distribution.hpp"
	header "boost/random/niederreiter_base2.hpp"
	header "boost/random/independent_bits.hpp"
	header "boost/random/chi_squared_distribution.hpp"
	header "boost/random/uniform_on_sphere.hpp"
	header "boost/random/triangle_distribution.hpp"
	header "boost/random/subtract_with_carry.hpp"
	header "boost/random/normal_distribution.hpp"
	header "boost/random/beta_distribution.hpp"
	header "boost/random/linear_congruential.hpp"
	header "boost/random/uniform_int_distribution.hpp"
	header "boost/random/faure.hpp"
	header "boost/random/laplace_distribution.hpp"
	header "boost/random/mixmax.hpp"
	header "boost/random/cauchy_distribution.hpp"
	header "boost/random/shuffle_output.hpp"
	export *
}