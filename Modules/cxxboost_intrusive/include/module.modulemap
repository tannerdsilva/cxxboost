module cxxboost_intrusive [system] {
	header "boost/intrusive/circular_list_algorithms.hpp"
	header "boost/intrusive/splaytree.hpp"
	header "boost/intrusive/unordered_set_hook.hpp"
	header "boost/intrusive/linear_slist_algorithms.hpp"
	header "boost/intrusive/avl_set_hook.hpp"
	header "boost/intrusive/slist_hook.hpp"
	header "boost/intrusive/pointer_rebind.hpp"
	header "boost/intrusive/set_hook.hpp"
	header "boost/intrusive/slist.hpp"
	header "boost/intrusive/pack_options.hpp"
	header "boost/intrusive/intrusive_fwd.hpp"
	header "boost/intrusive/parent_from_member.hpp"
	header "boost/intrusive/treap_algorithms.hpp"
	header "boost/intrusive/sgtree.hpp"
	header "boost/intrusive/pointer_plus_bits.hpp"
	header "boost/intrusive/bs_set.hpp"
	header "boost/intrusive/link_mode.hpp"
	header "boost/intrusive/circular_slist_algorithms.hpp"
	header "boost/intrusive/splaytree_algorithms.hpp"
	header "boost/intrusive/pointer_traits.hpp"
	header "boost/intrusive/avltree.hpp"
	header "boost/intrusive/list.hpp"
	header "boost/intrusive/treap.hpp"
	header "boost/intrusive/hashtable.hpp"
	header "boost/intrusive/member_value_traits.hpp"
	header "boost/intrusive/trivial_value_traits.hpp"
	header "boost/intrusive/sgtree_algorithms.hpp"
	header "boost/intrusive/bs_set_hook.hpp"
	header "boost/intrusive/detail/array_initializer.hpp"
	header "boost/intrusive/detail/iiterator.hpp"
	header "boost/intrusive/detail/default_header_holder.hpp"
	header "boost/intrusive/detail/has_member_function_callable_with.hpp"
	header "boost/intrusive/detail/hash_combine.hpp"
	header "boost/intrusive/detail/twin.hpp"
	header "boost/intrusive/detail/mpl.hpp"
	header "boost/intrusive/detail/simple_disposers.hpp"
	header "boost/intrusive/detail/common_slist_algorithms.hpp"
	header "boost/intrusive/detail/parent_from_member.hpp"
	header "boost/intrusive/detail/ebo_functor_holder.hpp"
	header "boost/intrusive/detail/rbtree_node.hpp"
	header "boost/intrusive/detail/bstree_algorithms_base.hpp"
	header "boost/intrusive/detail/equal_to_value.hpp"
	header "boost/intrusive/detail/list_node.hpp"
	header "boost/intrusive/detail/size_holder.hpp"
	header "boost/intrusive/detail/algorithm.hpp"
	header "boost/intrusive/detail/config_begin.hpp"
	header "boost/intrusive/detail/transform_iterator.hpp"
	header "boost/intrusive/detail/tree_iterator.hpp"
	header "boost/intrusive/detail/node_cloner_disposer.hpp"
	header "boost/intrusive/detail/node_holder.hpp"
	header "boost/intrusive/detail/function_detector.hpp"
	header "boost/intrusive/detail/hook_traits.hpp"
	header "boost/intrusive/detail/math.hpp"
	header "boost/intrusive/detail/minimal_less_equal_header.hpp"
	header "boost/intrusive/detail/assert.hpp"
	header "boost/intrusive/detail/tree_value_compare.hpp"
	header "boost/intrusive/detail/hashtable_node.hpp"
	header "boost/intrusive/detail/tree_node.hpp"
	header "boost/intrusive/detail/node_to_value.hpp"
	header "boost/intrusive/detail/reverse_iterator.hpp"
	header "boost/intrusive/detail/value_functors.hpp"
	header "boost/intrusive/detail/exception_disposer.hpp"
	header "boost/intrusive/detail/slist_node.hpp"
	header "boost/intrusive/detail/empty_node_checker.hpp"
	header "boost/intrusive/detail/key_nodeptr_comp.hpp"
	header "boost/intrusive/detail/list_iterator.hpp"
	header "boost/intrusive/detail/is_stateful_value_traits.hpp"
	header "boost/intrusive/detail/slist_iterator.hpp"
	header "boost/intrusive/detail/workaround.hpp"
	header "boost/intrusive/detail/any_node_and_algorithms.hpp"
	header "boost/intrusive/detail/iterator.hpp"
	header "boost/intrusive/detail/avltree_node.hpp"
	header "boost/intrusive/detail/std_fwd.hpp"
	header "boost/intrusive/detail/uncast.hpp"
	header "boost/intrusive/detail/get_value_traits.hpp"
	header "boost/intrusive/detail/algo_type.hpp"
	header "boost/intrusive/detail/config_end.hpp"
	header "boost/intrusive/detail/minimal_pair_header.hpp"
	header "boost/intrusive/detail/generic_hook.hpp"
	header "boost/intrusive/set.hpp"
	header "boost/intrusive/priority_compare.hpp"
	header "boost/intrusive/list_hook.hpp"
	header "boost/intrusive/derivation_value_traits.hpp"
	header "boost/intrusive/options.hpp"
	header "boost/intrusive/avl_set.hpp"
	header "boost/intrusive/bstree_algorithms.hpp"
	header "boost/intrusive/rbtree.hpp"
	header "boost/intrusive/rbtree_algorithms.hpp"
	header "boost/intrusive/splay_set.hpp"
	header "boost/intrusive/treap_set.hpp"
	header "boost/intrusive/unordered_set.hpp"
	header "boost/intrusive/any_hook.hpp"
	header "boost/intrusive/avltree_algorithms.hpp"
	header "boost/intrusive/bstree.hpp"
	header "boost/intrusive/sg_set.hpp"
	export *
}