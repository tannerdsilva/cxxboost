module cxxboost_parameter [system] {
	header "boost/parameter/is_argument_pack.hpp"
	header "boost/parameter/keyword.hpp"
	header "boost/parameter/compose.hpp"
	header "boost/parameter/macros.hpp"
	header "boost/parameter/config.hpp"
	header "boost/parameter/are_tagged_arguments.hpp"
	header "boost/parameter/optional.hpp"
	header "boost/parameter/deduced.hpp"
	header "boost/parameter/match.hpp"
	header "boost/parameter/nested_keyword.hpp"
	header "boost/parameter/template_keyword.hpp"
	header "boost/parameter/preprocessor_no_spec.hpp"
	header "boost/parameter/name.hpp"
	header "boost/parameter/parameters.hpp"
	header "boost/parameter/required.hpp"
	header "boost/parameter/aux_/use_default.hpp"
	header "boost/parameter/aux_/cast.hpp"
	header "boost/parameter/aux_/pp_impl/argument_pack.hpp"
	header "boost/parameter/aux_/pp_impl/unwrap_predicate.hpp"
	header "boost/parameter/aux_/pp_impl/match.hpp"
	header "boost/parameter/aux_/as_lvalue.hpp"
	header "boost/parameter/aux_/lambda_tag.hpp"
	header "boost/parameter/aux_/parenthesized_type.hpp"
	header "boost/parameter/aux_/use_default_tag.hpp"
	header "boost/parameter/aux_/tag.hpp"
	header "boost/parameter/aux_/arg_list.hpp"
	header "boost/parameter/aux_/pack/deduced_item.hpp"
	header "boost/parameter/aux_/pack/tag_deduced.hpp"
	header "boost/parameter/aux_/pack/is_named_argument.hpp"
	header "boost/parameter/aux_/pack/as_parameter_requirements.hpp"
	header "boost/parameter/aux_/pack/tag_keyword_arg.hpp"
	header "boost/parameter/aux_/pack/insert_tagged.hpp"
	header "boost/parameter/aux_/pack/make_items.hpp"
	header "boost/parameter/aux_/pack/tag_template_keyword_arg.hpp"
	header "boost/parameter/aux_/pack/make_deduced_items.hpp"
	header "boost/parameter/aux_/pack/predicate.hpp"
	header "boost/parameter/aux_/pack/tag_keyword_arg_ref.hpp"
	header "boost/parameter/aux_/pack/deduce_tag.hpp"
	header "boost/parameter/aux_/pack/item.hpp"
	header "boost/parameter/aux_/pack/make_parameter_spec_items.hpp"
	header "boost/parameter/aux_/pack/parameter_requirements.hpp"
	header "boost/parameter/aux_/pack/unmatched_argument.hpp"
	header "boost/parameter/aux_/pack/tag_type.hpp"
	header "boost/parameter/aux_/pack/satisfies.hpp"
	header "boost/parameter/aux_/pack/make_arg_list.hpp"
	header "boost/parameter/aux_/always_true_predicate.hpp"
	header "boost/parameter/aux_/is_placeholder.hpp"
	header "boost/parameter/aux_/unwrap_cv_reference.hpp"
	header "boost/parameter/aux_/yesno.hpp"
	header "boost/parameter/aux_/set.hpp"
	header "boost/parameter/aux_/has_nested_template_fn.hpp"
	header "boost/parameter/aux_/parameter_requirements.hpp"
	header "boost/parameter/aux_/template_keyword.hpp"
	header "boost/parameter/aux_/void.hpp"
	header "boost/parameter/aux_/tagged_argument_fwd.hpp"
	header "boost/parameter/aux_/name.hpp"
	header "boost/parameter/aux_/result_of0.hpp"
	header "boost/parameter/aux_/augment_predicate.hpp"
	header "boost/parameter/aux_/tagged_argument.hpp"
	header "boost/parameter/aux_/maybe.hpp"
	header "boost/parameter/aux_/is_maybe.hpp"
	header "boost/parameter/aux_/preprocessor/overloads.hpp"
	header "boost/parameter/aux_/preprocessor/binary_seq_for_each_inc.hpp"
	header "boost/parameter/aux_/preprocessor/impl/function_cast.hpp"
	header "boost/parameter/aux_/preprocessor/impl/forwarding_overloads.hpp"
	header "boost/parameter/aux_/preprocessor/impl/parenthesized_type.hpp"
	header "boost/parameter/aux_/preprocessor/impl/arity_range.hpp"
	header "boost/parameter/aux_/preprocessor/impl/function_dispatch_tuple.hpp"
	header "boost/parameter/aux_/preprocessor/impl/split_args.hpp"
	header "boost/parameter/aux_/preprocessor/impl/argument_specs.hpp"
	header "boost/parameter/aux_/preprocessor/impl/function_forward_match.hpp"
	header "boost/parameter/aux_/preprocessor/impl/function_dispatch_layer.hpp"
	header "boost/parameter/aux_/preprocessor/impl/no_spec_overloads.hpp"
	header "boost/parameter/aux_/preprocessor/impl/specification.hpp"
	header "boost/parameter/aux_/preprocessor/impl/for_each.hpp"
	header "boost/parameter/aux_/preprocessor/impl/flatten.hpp"
	header "boost/parameter/aux_/preprocessor/impl/parenthesized_return_type.hpp"
	header "boost/parameter/aux_/preprocessor/impl/function_name.hpp"
	header "boost/parameter/aux_/preprocessor/is_nullary.hpp"
	header "boost/parameter/aux_/preprocessor/qualifier.hpp"
	header "boost/parameter/aux_/preprocessor/seq_merge.hpp"
	header "boost/parameter/aux_/preprocessor/convert_binary_seq.hpp"
	header "boost/parameter/aux_/preprocessor/binary_seq_to_args.hpp"
	header "boost/parameter/aux_/preprocessor/is_binary.hpp"
	header "boost/parameter/aux_/preprocessor/for_each.hpp"
	header "boost/parameter/aux_/preprocessor/flatten.hpp"
	header "boost/parameter/aux_/preprocessor/nullptr.hpp"
	header "boost/parameter/aux_/preprocessor/seq_enum.hpp"
	header "boost/parameter/aux_/preprocessor/inc_binary_seq.hpp"
	header "boost/parameter/aux_/preprocessor/no_perfect_forwarding_begin.hpp"
	header "boost/parameter/aux_/preprocessor/for_each_pred.hpp"
	header "boost/parameter/aux_/preprocessor/no_perfect_forwarding_end.hpp"
	header "boost/parameter/aux_/preprocessor/binary_seq_for_each.hpp"
	header "boost/parameter/aux_/is_tagged_argument.hpp"
	header "boost/parameter/aux_/default.hpp"
	header "boost/parameter/preprocessor.hpp"
	header "boost/parameter/binding.hpp"
	header "boost/parameter/value_type.hpp"
	header "boost/parameter/keyword_fwd.hpp"
	header "boost/parameter.hpp"
	export *
}