module cxxboost_multiprecision [system] {
	header "boost/multiprecision/integer.hpp"
	header "boost/multiprecision/logged_adaptor.hpp"
	header "boost/multiprecision/cpp_complex.hpp"
	header "boost/multiprecision/number.hpp"
	header "boost/multiprecision/fwd.hpp"
	header "boost/multiprecision/cpp_int/bitwise.hpp"
	header "boost/multiprecision/cpp_int/add.hpp"
	header "boost/multiprecision/cpp_int/divide.hpp"
	header "boost/multiprecision/cpp_int/multiply.hpp"
	header "boost/multiprecision/cpp_int/literals.hpp"
	header "boost/multiprecision/cpp_int/value_pack.hpp"
	header "boost/multiprecision/cpp_int/checked.hpp"
	header "boost/multiprecision/cpp_int/comparison.hpp"
	header "boost/multiprecision/cpp_int/intel_intrinsics.hpp"
	header "boost/multiprecision/cpp_int/limits.hpp"
	header "boost/multiprecision/cpp_int/import_export.hpp"
	header "boost/multiprecision/cpp_int/add_unsigned.hpp"
	header "boost/multiprecision/cpp_int/serialize.hpp"
	header "boost/multiprecision/cpp_int/cpp_int_config.hpp"
	header "boost/multiprecision/cpp_int/misc.hpp"
	header "boost/multiprecision/traits/extract_exponent_type.hpp"
	header "boost/multiprecision/traits/explicit_conversion.hpp"
	header "boost/multiprecision/traits/is_backend.hpp"
	header "boost/multiprecision/traits/is_convertible_arithmetic.hpp"
	header "boost/multiprecision/traits/is_variable_precision.hpp"
	header "boost/multiprecision/traits/transcendental_reduction_type.hpp"
	header "boost/multiprecision/traits/std_integer_traits.hpp"
	header "boost/multiprecision/traits/is_byte_container.hpp"
	header "boost/multiprecision/traits/max_digits10.hpp"
	header "boost/multiprecision/traits/is_restricted_conversion.hpp"
	header "boost/multiprecision/traits/is_complex.hpp"
	header "boost/multiprecision/tommath.hpp"
	header "boost/multiprecision/mpfi.hpp"
	header "boost/multiprecision/eigen.hpp"
	header "boost/multiprecision/float128.hpp"
	header "boost/multiprecision/miller_rabin.hpp"
	header "boost/multiprecision/cpp_dec_float.hpp"
	header "boost/multiprecision/cpp_int.hpp"
	header "boost/multiprecision/random.hpp"
	header "boost/multiprecision/detail/number_compare.hpp"
	header "boost/multiprecision/detail/no_et_ops.hpp"
	header "boost/multiprecision/detail/rebind.hpp"
	header "boost/multiprecision/detail/hash.hpp"
	header "boost/multiprecision/detail/bitscan.hpp"
	header "boost/multiprecision/detail/itos.hpp"
	header "boost/multiprecision/detail/no_exceptions_support.hpp"
	header "boost/multiprecision/detail/fpclassify.hpp"
	header "boost/multiprecision/detail/standalone_config.hpp"
	header "boost/multiprecision/detail/check_cpp11_config.hpp"
	header "boost/multiprecision/detail/atomic.hpp"
	header "boost/multiprecision/detail/digits.hpp"
	header "boost/multiprecision/detail/et_ops.hpp"
	header "boost/multiprecision/detail/static_array.hpp"
	header "boost/multiprecision/detail/integer_ops.hpp"
	header "boost/multiprecision/detail/precision.hpp"
	header "boost/multiprecision/detail/endian.hpp"
	header "boost/multiprecision/detail/assert.hpp"
	header "boost/multiprecision/detail/min_max.hpp"
	header "boost/multiprecision/detail/tables.hpp"
	header "boost/multiprecision/detail/generic_interconvert.hpp"
	header "boost/multiprecision/detail/functions/trunc.hpp"
	header "boost/multiprecision/detail/functions/pow.hpp"
	header "boost/multiprecision/detail/functions/constants.hpp"
	header "boost/multiprecision/detail/functions/trig.hpp"
	header "boost/multiprecision/detail/empty_value.hpp"
	header "boost/multiprecision/detail/ublas_interop.hpp"
	header "boost/multiprecision/detail/float_string_cvt.hpp"
	header "boost/multiprecision/detail/constexpr.hpp"
	header "boost/multiprecision/detail/dynamic_array.hpp"
	header "boost/multiprecision/detail/string_helpers.hpp"
	header "boost/multiprecision/detail/number_base.hpp"
	header "boost/multiprecision/detail/float128_functions.hpp"
	header "boost/multiprecision/detail/utype_helper.hpp"
	header "boost/multiprecision/detail/default_ops.hpp"
	header "boost/multiprecision/detail/uniform_int_distribution.hpp"
	header "boost/multiprecision/cpp_bin_float.hpp"
	header "boost/multiprecision/gmp.hpp"
	header "boost/multiprecision/concepts/mp_number_archetypes.hpp"
	header "boost/multiprecision/rational_adaptor.hpp"
	header "boost/multiprecision/cpp_bin_float/transcendental.hpp"
	header "boost/multiprecision/cpp_bin_float/io.hpp"
	header "boost/multiprecision/mpfr.hpp"
	header "boost/multiprecision/debug_adaptor.hpp"
	header "boost/multiprecision/complex128.hpp"
	header "boost/multiprecision/complex_adaptor.hpp"
	header "boost/multiprecision/mpc.hpp"
	export *
}