module cxxboost_icl [system] {
	header "boost/icl/interval_base_set.hpp"
	header "boost/icl/predicates/distinct_equal.hpp"
	header "boost/icl/predicates/sub_super_set.hpp"
	header "boost/icl/predicates/std_equal.hpp"
	header "boost/icl/predicates/element_equal.hpp"
	header "boost/icl/gregorian.hpp"
	header "boost/icl/interval_set.hpp"
	header "boost/icl/ptime.hpp"
	header "boost/icl/associative_interval_container.hpp"
	header "boost/icl/interval_traits.hpp"
	header "boost/icl/interval.hpp"
	header "boost/icl/left_open_interval.hpp"
	header "boost/icl/functors.hpp"
	header "boost/icl/associative_element_container.hpp"
	header "boost/icl/interval_bounds.hpp"
	header "boost/icl/map.hpp"
	header "boost/icl/type_traits/interval_type_default.hpp"
	header "boost/icl/type_traits/difference.hpp"
	header "boost/icl/type_traits/to_string.hpp"
	header "boost/icl/type_traits/size_type_of.hpp"
	header "boost/icl/type_traits/unit_element.hpp"
	header "boost/icl/type_traits/domain_type_of.hpp"
	header "boost/icl/type_traits/adds_inversely.hpp"
	header "boost/icl/type_traits/is_set.hpp"
	header "boost/icl/type_traits/is_interval_separator.hpp"
	header "boost/icl/type_traits/succ_pred.hpp"
	header "boost/icl/type_traits/identity_element.hpp"
	header "boost/icl/type_traits/is_continuous.hpp"
	header "boost/icl/type_traits/is_interval.hpp"
	header "boost/icl/type_traits/size.hpp"
	header "boost/icl/type_traits/is_numeric.hpp"
	header "boost/icl/type_traits/segment_type_of.hpp"
	header "boost/icl/type_traits/is_container.hpp"
	header "boost/icl/type_traits/has_inverse.hpp"
	header "boost/icl/type_traits/has_set_semantics.hpp"
	header "boost/icl/type_traits/is_asymmetric_interval.hpp"
	header "boost/icl/type_traits/predicate.hpp"
	header "boost/icl/type_traits/is_concept_equivalent.hpp"
	header "boost/icl/type_traits/is_icl_container.hpp"
	header "boost/icl/type_traits/no_type.hpp"
	header "boost/icl/type_traits/is_discrete.hpp"
	header "boost/icl/type_traits/is_interval_joiner.hpp"
	header "boost/icl/type_traits/difference_type_of.hpp"
	header "boost/icl/type_traits/is_increasing.hpp"
	header "boost/icl/type_traits/is_total.hpp"
	header "boost/icl/type_traits/absorbs_identities.hpp"
	header "boost/icl/type_traits/rep_type_of.hpp"
	header "boost/icl/type_traits/interval_type_of.hpp"
	header "boost/icl/type_traits/is_discrete_interval.hpp"
	header "boost/icl/type_traits/is_associative_element_container.hpp"
	header "boost/icl/type_traits/is_combinable.hpp"
	header "boost/icl/type_traits/is_continuous_interval.hpp"
	header "boost/icl/type_traits/type_to_string.hpp"
	header "boost/icl/type_traits/infinity.hpp"
	header "boost/icl/type_traits/is_interval_container.hpp"
	header "boost/icl/type_traits/element_type_of.hpp"
	header "boost/icl/type_traits/is_key_container_of.hpp"
	header "boost/icl/type_traits/is_map.hpp"
	header "boost/icl/type_traits/codomain_type_of.hpp"
	header "boost/icl/type_traits/value_size.hpp"
	header "boost/icl/type_traits/is_element_container.hpp"
	header "boost/icl/type_traits/is_interval_splitter.hpp"
	header "boost/icl/continuous_interval.hpp"
	header "boost/icl/split_interval_set.hpp"
	header "boost/icl/closed_interval.hpp"
	header "boost/icl/detail/interval_morphism.hpp"
	header "boost/icl/detail/set_algo.hpp"
	header "boost/icl/detail/element_iterator.hpp"
	header "boost/icl/detail/element_comparer.hpp"
	header "boost/icl/detail/relation_state.hpp"
	header "boost/icl/detail/std_set.hpp"
	header "boost/icl/detail/associated_value.hpp"
	header "boost/icl/detail/map_algo.hpp"
	header "boost/icl/detail/boost_config.hpp"
	header "boost/icl/detail/interval_subset_comparer.hpp"
	header "boost/icl/detail/on_absorbtion.hpp"
	header "boost/icl/detail/concept_check.hpp"
	header "boost/icl/detail/mapped_reference.hpp"
	header "boost/icl/detail/exclusive_less_than.hpp"
	header "boost/icl/detail/interval_map_algo.hpp"
	header "boost/icl/detail/design_config.hpp"
	header "boost/icl/detail/notate.hpp"
	header "boost/icl/detail/subset_comparer.hpp"
	header "boost/icl/detail/interval_set_algo.hpp"
	header "boost/icl/discrete_interval.hpp"
	header "boost/icl/set.hpp"
	header "boost/icl/concept/interval_associator_base.hpp"
	header "boost/icl/concept/interval_set.hpp"
	header "boost/icl/concept/container.hpp"
	header "boost/icl/concept/interval.hpp"
	header "boost/icl/concept/set_value.hpp"
	header "boost/icl/concept/interval_bounds.hpp"
	header "boost/icl/concept/element_set.hpp"
	header "boost/icl/concept/element_associator.hpp"
	header "boost/icl/concept/element_set_value.hpp"
	header "boost/icl/concept/interval_set_value.hpp"
	header "boost/icl/concept/element_map.hpp"
	header "boost/icl/concept/map_value.hpp"
	header "boost/icl/concept/interval_map.hpp"
	header "boost/icl/concept/interval_associator.hpp"
	header "boost/icl/concept/comparable.hpp"
	header "boost/icl/concept/joinable.hpp"
	header "boost/icl/split_interval_map.hpp"
	header "boost/icl/separate_interval_set.hpp"
	header "boost/icl/interval_map.hpp"
	header "boost/icl/interval_combining_style.hpp"
	header "boost/icl/interval_base_map.hpp"
	header "boost/icl/impl_config.hpp"
	header "boost/icl/rational.hpp"
	header "boost/icl/dynamic_interval_traits.hpp"
	header "boost/icl/iterator.hpp"
	header "boost/icl/open_interval.hpp"
	header "boost/icl/right_open_interval.hpp"
	export *
}