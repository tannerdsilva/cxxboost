module cxxboost_hana [system] {
	header "boost/hana.hpp"
	header "boost/hana/adjust_if.hpp"
	header "boost/hana/prefix.hpp"
	header "boost/hana/fwd/adjust_if.hpp"
	header "boost/hana/fwd/prefix.hpp"
	header "boost/hana/fwd/remove_if.hpp"
	header "boost/hana/fwd/difference.hpp"
	header "boost/hana/fwd/pair.hpp"
	header "boost/hana/fwd/take_back.hpp"
	header "boost/hana/fwd/scan_right.hpp"
	header "boost/hana/fwd/ap.hpp"
	header "boost/hana/fwd/hash.hpp"
	header "boost/hana/fwd/plus.hpp"
	header "boost/hana/fwd/any_of.hpp"
	header "boost/hana/fwd/insert.hpp"
	header "boost/hana/fwd/min.hpp"
	header "boost/hana/fwd/zip.hpp"
	header "boost/hana/fwd/span.hpp"
	header "boost/hana/fwd/core/is_a.hpp"
	header "boost/hana/fwd/core/make.hpp"
	header "boost/hana/fwd/core/when.hpp"
	header "boost/hana/fwd/core/to.hpp"
	header "boost/hana/fwd/core/common.hpp"
	header "boost/hana/fwd/core/tag_of.hpp"
	header "boost/hana/fwd/core/default.hpp"
	header "boost/hana/fwd/product.hpp"
	header "boost/hana/fwd/bool.hpp"
	header "boost/hana/fwd/eval.hpp"
	header "boost/hana/fwd/fold_right.hpp"
	header "boost/hana/fwd/at.hpp"
	header "boost/hana/fwd/zip_with.hpp"
	header "boost/hana/fwd/group.hpp"
	header "boost/hana/fwd/extract.hpp"
	header "boost/hana/fwd/monadic_fold_left.hpp"
	header "boost/hana/fwd/drop_front_exactly.hpp"
	header "boost/hana/fwd/type.hpp"
	header "boost/hana/fwd/keys.hpp"
	header "boost/hana/fwd/size.hpp"
	header "boost/hana/fwd/greater.hpp"
	header "boost/hana/fwd/maximum.hpp"
	header "boost/hana/fwd/then.hpp"
	header "boost/hana/fwd/equal.hpp"
	header "boost/hana/fwd/members.hpp"
	header "boost/hana/fwd/unfold_right.hpp"
	header "boost/hana/fwd/negate.hpp"
	header "boost/hana/fwd/tap.hpp"
	header "boost/hana/fwd/zip_shortest.hpp"
	header "boost/hana/fwd/is_disjoint.hpp"
	header "boost/hana/fwd/map.hpp"
	header "boost/hana/fwd/unique.hpp"
	header "boost/hana/fwd/power.hpp"
	header "boost/hana/fwd/partition.hpp"
	header "boost/hana/fwd/transform.hpp"
	header "boost/hana/fwd/replace_if.hpp"
	header "boost/hana/fwd/duplicate.hpp"
	header "boost/hana/fwd/unpack.hpp"
	header "boost/hana/fwd/empty.hpp"
	header "boost/hana/fwd/index_if.hpp"
	header "boost/hana/fwd/cartesian_product.hpp"
	header "boost/hana/fwd/chain.hpp"
	header "boost/hana/fwd/all.hpp"
	header "boost/hana/fwd/and.hpp"
	header "boost/hana/fwd/insert_range.hpp"
	header "boost/hana/fwd/tuple.hpp"
	header "boost/hana/fwd/value.hpp"
	header "boost/hana/fwd/erase_key.hpp"
	header "boost/hana/fwd/zero.hpp"
	header "boost/hana/fwd/fuse.hpp"
	header "boost/hana/fwd/lift.hpp"
	header "boost/hana/fwd/fold_left.hpp"
	header "boost/hana/fwd/div.hpp"
	header "boost/hana/fwd/extend.hpp"
	header "boost/hana/fwd/repeat.hpp"
	header "boost/hana/fwd/remove_range.hpp"
	header "boost/hana/fwd/is_empty.hpp"
	header "boost/hana/fwd/fold.hpp"
	header "boost/hana/fwd/find_if.hpp"
	header "boost/hana/fwd/suffix.hpp"
	header "boost/hana/fwd/replace.hpp"
	header "boost/hana/fwd/any.hpp"
	header "boost/hana/fwd/if.hpp"
	header "boost/hana/fwd/slice.hpp"
	header "boost/hana/fwd/find.hpp"
	header "boost/hana/fwd/fill.hpp"
	header "boost/hana/fwd/minus.hpp"
	header "boost/hana/fwd/drop_while.hpp"
	header "boost/hana/fwd/take_front.hpp"
	header "boost/hana/fwd/unfold_left.hpp"
	header "boost/hana/fwd/optional.hpp"
	header "boost/hana/fwd/set.hpp"
	header "boost/hana/fwd/lexicographical_compare.hpp"
	header "boost/hana/fwd/mod.hpp"
	header "boost/hana/fwd/max.hpp"
	header "boost/hana/fwd/concept/functor.hpp"
	header "boost/hana/fwd/concept/constant.hpp"
	header "boost/hana/fwd/concept/logical.hpp"
	header "boost/hana/fwd/concept/monoid.hpp"
	header "boost/hana/fwd/concept/product.hpp"
	header "boost/hana/fwd/concept/group.hpp"
	header "boost/hana/fwd/concept/searchable.hpp"
	header "boost/hana/fwd/concept/hashable.hpp"
	header "boost/hana/fwd/concept/sequence.hpp"
	header "boost/hana/fwd/concept/euclidean_ring.hpp"
	header "boost/hana/fwd/concept/ring.hpp"
	header "boost/hana/fwd/concept/integral_constant.hpp"
	header "boost/hana/fwd/concept/iterable.hpp"
	header "boost/hana/fwd/concept/comonad.hpp"
	header "boost/hana/fwd/concept/orderable.hpp"
	header "boost/hana/fwd/concept/struct.hpp"
	header "boost/hana/fwd/concept/metafunction.hpp"
	header "boost/hana/fwd/concept/foldable.hpp"
	header "boost/hana/fwd/concept/applicative.hpp"
	header "boost/hana/fwd/concept/monad_plus.hpp"
	header "boost/hana/fwd/concept/comparable.hpp"
	header "boost/hana/fwd/concept/monad.hpp"
	header "boost/hana/fwd/comparing.hpp"
	header "boost/hana/fwd/adapt_adt.hpp"
	header "boost/hana/fwd/drop_front.hpp"
	header "boost/hana/fwd/at_key.hpp"
	header "boost/hana/fwd/eval_if.hpp"
	header "boost/hana/fwd/take_while.hpp"
	header "boost/hana/fwd/string.hpp"
	header "boost/hana/fwd/integral_constant.hpp"
	header "boost/hana/fwd/second.hpp"
	header "boost/hana/fwd/accessors.hpp"
	header "boost/hana/fwd/one.hpp"
	header "boost/hana/fwd/reverse.hpp"
	header "boost/hana/fwd/sort.hpp"
	header "boost/hana/fwd/remove.hpp"
	header "boost/hana/fwd/less.hpp"
	header "boost/hana/fwd/filter.hpp"
	header "boost/hana/fwd/ordering.hpp"
	header "boost/hana/fwd/remove_at.hpp"
	header "boost/hana/fwd/scan_left.hpp"
	header "boost/hana/fwd/for_each.hpp"
	header "boost/hana/fwd/count.hpp"
	header "boost/hana/fwd/replicate.hpp"
	header "boost/hana/fwd/less_equal.hpp"
	header "boost/hana/fwd/concat.hpp"
	header "boost/hana/fwd/union.hpp"
	header "boost/hana/fwd/cycle.hpp"
	header "boost/hana/fwd/is_subset.hpp"
	header "boost/hana/fwd/flatten.hpp"
	header "boost/hana/fwd/mult.hpp"
	header "boost/hana/fwd/adapt_struct.hpp"
	header "boost/hana/fwd/not_equal.hpp"
	header "boost/hana/fwd/define_struct.hpp"
	header "boost/hana/fwd/minimum.hpp"
	header "boost/hana/fwd/monadic_fold_right.hpp"
	header "boost/hana/fwd/drop_back.hpp"
	header "boost/hana/fwd/permutations.hpp"
	header "boost/hana/fwd/or.hpp"
	header "boost/hana/fwd/while.hpp"
	header "boost/hana/fwd/length.hpp"
	header "boost/hana/fwd/intersection.hpp"
	header "boost/hana/fwd/none.hpp"
	header "boost/hana/fwd/range.hpp"
	header "boost/hana/fwd/adjust.hpp"
	header "boost/hana/fwd/basic_tuple.hpp"
	header "boost/hana/fwd/symmetric_difference.hpp"
	header "boost/hana/fwd/monadic_compose.hpp"
	header "boost/hana/fwd/none_of.hpp"
	header "boost/hana/fwd/sum.hpp"
	header "boost/hana/fwd/first.hpp"
	header "boost/hana/fwd/all_of.hpp"
	header "boost/hana/fwd/front.hpp"
	header "boost/hana/fwd/prepend.hpp"
	header "boost/hana/fwd/lazy.hpp"
	header "boost/hana/fwd/greater_equal.hpp"
	header "boost/hana/fwd/reverse_fold.hpp"
	header "boost/hana/fwd/back.hpp"
	header "boost/hana/fwd/zip_shortest_with.hpp"
	header "boost/hana/fwd/core.hpp"
	header "boost/hana/fwd/append.hpp"
	header "boost/hana/fwd/not.hpp"
	header "boost/hana/fwd/count_if.hpp"
	header "boost/hana/fwd/intersperse.hpp"
	header "boost/hana/fwd/contains.hpp"
	header "boost/hana/remove_if.hpp"
	header "boost/hana/difference.hpp"
	header "boost/hana/pair.hpp"
	header "boost/hana/take_back.hpp"
	header "boost/hana/scan_right.hpp"
	header "boost/hana/ap.hpp"
	header "boost/hana/experimental/type_name.hpp"
	header "boost/hana/experimental/printable.hpp"
	header "boost/hana/experimental/view.hpp"
	header "boost/hana/experimental/types.hpp"
	header "boost/hana/hash.hpp"
	header "boost/hana/plus.hpp"
	header "boost/hana/any_of.hpp"
	header "boost/hana/insert.hpp"
	header "boost/hana/min.hpp"
	header "boost/hana/zip.hpp"
	header "boost/hana/span.hpp"
	header "boost/hana/core/dispatch.hpp"
	header "boost/hana/core/is_a.hpp"
	header "boost/hana/core/make.hpp"
	header "boost/hana/core/when.hpp"
	header "boost/hana/core/to.hpp"
	header "boost/hana/core/common.hpp"
	header "boost/hana/core/tag_of.hpp"
	header "boost/hana/core/default.hpp"
	header "boost/hana/product.hpp"
	header "boost/hana/bool.hpp"
	header "boost/hana/eval.hpp"
	header "boost/hana/fold_right.hpp"
	header "boost/hana/at.hpp"
	header "boost/hana/zip_with.hpp"
	header "boost/hana/group.hpp"
	header "boost/hana/extract.hpp"
	header "boost/hana/monadic_fold_left.hpp"
	header "boost/hana/drop_front_exactly.hpp"
	header "boost/hana/type.hpp"
	header "boost/hana/keys.hpp"
	header "boost/hana/size.hpp"
	header "boost/hana/greater.hpp"
	header "boost/hana/maximum.hpp"
	header "boost/hana/then.hpp"
	header "boost/hana/equal.hpp"
	header "boost/hana/members.hpp"
	header "boost/hana/unfold_right.hpp"
	header "boost/hana/negate.hpp"
	header "boost/hana/tap.hpp"
	header "boost/hana/zip_shortest.hpp"
	header "boost/hana/is_disjoint.hpp"
	header "boost/hana/traits.hpp"
	header "boost/hana/map.hpp"
	header "boost/hana/unique.hpp"
	header "boost/hana/power.hpp"
	header "boost/hana/partition.hpp"
	header "boost/hana/transform.hpp"
	header "boost/hana/ext/std.hpp"
	header "boost/hana/ext/boost/fusion/vector.hpp"
	header "boost/hana/ext/boost/fusion/tuple.hpp"
	header "boost/hana/ext/boost/fusion/list.hpp"
	header "boost/hana/ext/boost/fusion/detail/common.hpp"
	header "boost/hana/ext/boost/fusion/deque.hpp"
	header "boost/hana/ext/boost/mpl.hpp"
	header "boost/hana/ext/boost/tuple.hpp"
	header "boost/hana/ext/boost/mpl/integral_c.hpp"
	header "boost/hana/ext/boost/mpl/vector.hpp"
	header "boost/hana/ext/boost/mpl/list.hpp"
	header "boost/hana/ext/boost/fusion.hpp"
	header "boost/hana/ext/boost.hpp"
	header "boost/hana/ext/std/pair.hpp"
	header "boost/hana/ext/std/array.hpp"
	header "boost/hana/ext/std/vector.hpp"
	header "boost/hana/ext/std/tuple.hpp"
	header "boost/hana/ext/std/ratio.hpp"
	header "boost/hana/ext/std/integral_constant.hpp"
	header "boost/hana/ext/std/integer_sequence.hpp"
	header "boost/hana/replace_if.hpp"
	header "boost/hana/duplicate.hpp"
	header "boost/hana/unpack.hpp"
	header "boost/hana/empty.hpp"
	header "boost/hana/index_if.hpp"
	header "boost/hana/cartesian_product.hpp"
	header "boost/hana/chain.hpp"
	header "boost/hana/all.hpp"
	header "boost/hana/and.hpp"
	header "boost/hana/insert_range.hpp"
	header "boost/hana/config.hpp"
	header "boost/hana/tuple.hpp"
	header "boost/hana/value.hpp"
	header "boost/hana/erase_key.hpp"
	header "boost/hana/zero.hpp"
	header "boost/hana/fuse.hpp"
	header "boost/hana/lift.hpp"
	header "boost/hana/fold_left.hpp"
	header "boost/hana/div.hpp"
	header "boost/hana/extend.hpp"
	header "boost/hana/repeat.hpp"
	header "boost/hana/remove_range.hpp"
	header "boost/hana/is_empty.hpp"
	header "boost/hana/functional.hpp"
	header "boost/hana/fold.hpp"
	header "boost/hana/find_if.hpp"
	header "boost/hana/suffix.hpp"
	header "boost/hana/replace.hpp"
	header "boost/hana/version.hpp"
	header "boost/hana/any.hpp"
	header "boost/hana/if.hpp"
	header "boost/hana/detail/concepts.hpp"
	header "boost/hana/detail/any_of.hpp"
	header "boost/hana/detail/wrong.hpp"
	header "boost/hana/detail/nested_by.hpp"
	header "boost/hana/detail/operators/logical.hpp"
	header "boost/hana/detail/operators/searchable.hpp"
	header "boost/hana/detail/operators/arithmetic.hpp"
	header "boost/hana/detail/operators/iterable.hpp"
	header "boost/hana/detail/operators/orderable.hpp"
	header "boost/hana/detail/operators/adl.hpp"
	header "boost/hana/detail/operators/comparable.hpp"
	header "boost/hana/detail/operators/monad.hpp"
	header "boost/hana/detail/variadic/split_at.hpp"
	header "boost/hana/detail/variadic/at.hpp"
	header "boost/hana/detail/variadic/foldl1.hpp"
	header "boost/hana/detail/variadic/drop_into.hpp"
	header "boost/hana/detail/variadic/foldr1.hpp"
	header "boost/hana/detail/variadic/reverse_apply/unrolled.hpp"
	header "boost/hana/detail/variadic/reverse_apply/flat.hpp"
	header "boost/hana/detail/variadic/reverse_apply.hpp"
	header "boost/hana/detail/variadic/take.hpp"
	header "boost/hana/detail/type_at.hpp"
	header "boost/hana/detail/array.hpp"
	header "boost/hana/detail/intrinsics.hpp"
	header "boost/hana/detail/index_if.hpp"
	header "boost/hana/detail/algorithm.hpp"
	header "boost/hana/detail/create.hpp"
	header "boost/hana/detail/nested_to_fwd.hpp"
	header "boost/hana/detail/fast_and.hpp"
	header "boost/hana/detail/has_duplicates.hpp"
	header "boost/hana/detail/nested_than.hpp"
	header "boost/hana/detail/canonical_constant.hpp"
	header "boost/hana/detail/hash_table.hpp"
	header "boost/hana/detail/type_foldr1.hpp"
	header "boost/hana/detail/nested_by_fwd.hpp"
	header "boost/hana/detail/ebo.hpp"
	header "boost/hana/detail/first_unsatisfied_index.hpp"
	header "boost/hana/detail/nested_than_fwd.hpp"
	header "boost/hana/detail/integral_constant.hpp"
	header "boost/hana/detail/dispatch_if.hpp"
	header "boost/hana/detail/void_t.hpp"
	header "boost/hana/detail/has_common_embedding.hpp"
	header "boost/hana/detail/decay.hpp"
	header "boost/hana/detail/std_common_type.hpp"
	header "boost/hana/detail/nested_to.hpp"
	header "boost/hana/detail/preprocessor.hpp"
	header "boost/hana/detail/unpack_flatten.hpp"
	header "boost/hana/detail/type_foldl1.hpp"
	header "boost/hana/detail/struct_macros.hpp"
	header "boost/hana/slice.hpp"
	header "boost/hana/find.hpp"
	header "boost/hana/fill.hpp"
	header "boost/hana/minus.hpp"
	header "boost/hana/drop_while.hpp"
	header "boost/hana/take_front.hpp"
	header "boost/hana/unfold_left.hpp"
	header "boost/hana/optional.hpp"
	header "boost/hana/set.hpp"
	header "boost/hana/lexicographical_compare.hpp"
	header "boost/hana/mod.hpp"
	header "boost/hana/max.hpp"
	header "boost/hana/assert.hpp"
	header "boost/hana/concept/functor.hpp"
	header "boost/hana/concept/constant.hpp"
	header "boost/hana/concept/logical.hpp"
	header "boost/hana/concept/monoid.hpp"
	header "boost/hana/concept/product.hpp"
	header "boost/hana/concept/group.hpp"
	header "boost/hana/concept/searchable.hpp"
	header "boost/hana/concept/hashable.hpp"
	header "boost/hana/concept/sequence.hpp"
	header "boost/hana/concept/euclidean_ring.hpp"
	header "boost/hana/concept/ring.hpp"
	header "boost/hana/concept/integral_constant.hpp"
	header "boost/hana/concept/iterable.hpp"
	header "boost/hana/concept/comonad.hpp"
	header "boost/hana/concept/orderable.hpp"
	header "boost/hana/concept/struct.hpp"
	header "boost/hana/concept/metafunction.hpp"
	header "boost/hana/concept/foldable.hpp"
	header "boost/hana/concept/applicative.hpp"
	header "boost/hana/concept/monad_plus.hpp"
	header "boost/hana/concept/comparable.hpp"
	header "boost/hana/concept/monad.hpp"
	header "boost/hana/comparing.hpp"
	header "boost/hana/adapt_adt.hpp"
	header "boost/hana/concept.hpp"
	header "boost/hana/drop_front.hpp"
	header "boost/hana/at_key.hpp"
	header "boost/hana/eval_if.hpp"
	header "boost/hana/take_while.hpp"
	header "boost/hana/string.hpp"
	header "boost/hana/integral_constant.hpp"
	header "boost/hana/second.hpp"
	header "boost/hana/accessors.hpp"
	header "boost/hana/one.hpp"
	header "boost/hana/reverse.hpp"
	header "boost/hana/sort.hpp"
	header "boost/hana/remove.hpp"
	header "boost/hana/less.hpp"
	header "boost/hana/filter.hpp"
	header "boost/hana/ordering.hpp"
	header "boost/hana/remove_at.hpp"
	header "boost/hana/scan_left.hpp"
	header "boost/hana/for_each.hpp"
	header "boost/hana/count.hpp"
	header "boost/hana/replicate.hpp"
	header "boost/hana/less_equal.hpp"
	header "boost/hana/concat.hpp"
	header "boost/hana/union.hpp"
	header "boost/hana/cycle.hpp"
	header "boost/hana/is_subset.hpp"
	header "boost/hana/flatten.hpp"
	header "boost/hana/mult.hpp"
	header "boost/hana/adapt_struct.hpp"
	header "boost/hana/not_equal.hpp"
	header "boost/hana/define_struct.hpp"
	header "boost/hana/minimum.hpp"
	header "boost/hana/monadic_fold_right.hpp"
	header "boost/hana/drop_back.hpp"
	header "boost/hana/permutations.hpp"
	header "boost/hana/or.hpp"
	header "boost/hana/while.hpp"
	header "boost/hana/length.hpp"
	header "boost/hana/intersection.hpp"
	header "boost/hana/none.hpp"
	header "boost/hana/range.hpp"
	header "boost/hana/adjust.hpp"
	header "boost/hana/basic_tuple.hpp"
	header "boost/hana/symmetric_difference.hpp"
	header "boost/hana/monadic_compose.hpp"
	header "boost/hana/none_of.hpp"
	header "boost/hana/sum.hpp"
	header "boost/hana/first.hpp"
	header "boost/hana/all_of.hpp"
	header "boost/hana/front.hpp"
	header "boost/hana/prepend.hpp"
	header "boost/hana/functional/on.hpp"
	header "boost/hana/functional/demux.hpp"
	header "boost/hana/functional/compose.hpp"
	header "boost/hana/functional/infix.hpp"
	header "boost/hana/functional/iterate.hpp"
	header "boost/hana/functional/apply.hpp"
	header "boost/hana/functional/partial.hpp"
	header "boost/hana/functional/flip.hpp"
	header "boost/hana/functional/lockstep.hpp"
	header "boost/hana/functional/overload_linearly.hpp"
	header "boost/hana/functional/id.hpp"
	header "boost/hana/functional/fix.hpp"
	header "boost/hana/functional/placeholder.hpp"
	header "boost/hana/functional/curry.hpp"
	header "boost/hana/functional/capture.hpp"
	header "boost/hana/functional/always.hpp"
	header "boost/hana/functional/arg.hpp"
	header "boost/hana/functional/reverse_partial.hpp"
	header "boost/hana/functional/overload.hpp"
	header "boost/hana/lazy.hpp"
	header "boost/hana/greater_equal.hpp"
	header "boost/hana/reverse_fold.hpp"
	header "boost/hana/back.hpp"
	header "boost/hana/zip_shortest_with.hpp"
	header "boost/hana/core.hpp"
	header "boost/hana/append.hpp"
	header "boost/hana/not.hpp"
	header "boost/hana/count_if.hpp"
	header "boost/hana/intersperse.hpp"
	header "boost/hana/contains.hpp"
	export *
}