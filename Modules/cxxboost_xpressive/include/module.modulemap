module cxxboost_xpressive [system] {
	header "boost/xpressive/regex_primitives.hpp"
	header "boost/xpressive/xpressive_fwd.hpp"
	header "boost/xpressive/traits/c_regex_traits.hpp"
	header "boost/xpressive/traits/cpp_regex_traits.hpp"
	header "boost/xpressive/traits/detail/c_ctype.hpp"
	header "boost/xpressive/traits/null_regex_traits.hpp"
	header "boost/xpressive/xpressive_static.hpp"
	header "boost/xpressive/xpressive_dynamic.hpp"
	header "boost/xpressive/regex_iterator.hpp"
	header "boost/xpressive/basic_regex.hpp"
	header "boost/xpressive/detail/dynamic/parse_charset.hpp"
	header "boost/xpressive/detail/dynamic/matchable.hpp"
	header "boost/xpressive/detail/dynamic/parser.hpp"
	header "boost/xpressive/detail/dynamic/parser_traits.hpp"
	header "boost/xpressive/detail/dynamic/sequence.hpp"
	header "boost/xpressive/detail/dynamic/parser_enum.hpp"
	header "boost/xpressive/detail/dynamic/dynamic.hpp"
	header "boost/xpressive/detail/core/finder.hpp"
	header "boost/xpressive/detail/core/peeker.hpp"
	header "boost/xpressive/detail/core/sub_match_vector.hpp"
	header "boost/xpressive/detail/core/access.hpp"
	header "boost/xpressive/detail/core/action.hpp"
	header "boost/xpressive/detail/core/flow_control.hpp"
	header "boost/xpressive/detail/core/list.hpp"
	header "boost/xpressive/detail/core/matcher/any_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/assert_line_base.hpp"
	header "boost/xpressive/detail/core/matcher/mark_begin_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/literal_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/posix_charset_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/regex_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/simple_repeat_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/attr_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/lookahead_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/range_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/repeat_end_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/mark_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/assert_word_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/predicate_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/assert_eos_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/epsilon_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/string_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/assert_eol_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/assert_bol_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/attr_begin_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/assert_bos_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/logical_newline_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/mark_end_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/end_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/keeper_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/true_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/alternate_end_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/optional_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/lookbehind_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/action_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/charset_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/set_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/repeat_begin_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/attr_end_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/regex_byref_matcher.hpp"
	header "boost/xpressive/detail/core/matcher/alternate_matcher.hpp"
	header "boost/xpressive/detail/core/regex_impl.hpp"
	header "boost/xpressive/detail/core/sub_match_impl.hpp"
	header "boost/xpressive/detail/core/state.hpp"
	header "boost/xpressive/detail/core/linker.hpp"
	header "boost/xpressive/detail/core/quant_style.hpp"
	header "boost/xpressive/detail/core/optimize.hpp"
	header "boost/xpressive/detail/core/results_cache.hpp"
	header "boost/xpressive/detail/core/regex_domain.hpp"
	header "boost/xpressive/detail/core/matchers.hpp"
	header "boost/xpressive/detail/core/icase.hpp"
	header "boost/xpressive/detail/core/adaptor.hpp"
	header "boost/xpressive/detail/detail_fwd.hpp"
	header "boost/xpressive/detail/static/visitor.hpp"
	header "boost/xpressive/detail/static/static.hpp"
	header "boost/xpressive/detail/static/transmogrify.hpp"
	header "boost/xpressive/detail/static/compile.hpp"
	header "boost/xpressive/detail/static/grammar.hpp"
	header "boost/xpressive/detail/static/type_traits.hpp"
	header "boost/xpressive/detail/static/modifier.hpp"
	header "boost/xpressive/detail/static/placeholders.hpp"
	header "boost/xpressive/detail/static/transforms/as_modifier.hpp"
	header "boost/xpressive/detail/static/transforms/as_independent.hpp"
	header "boost/xpressive/detail/static/transforms/as_alternate.hpp"
	header "boost/xpressive/detail/static/transforms/as_inverse.hpp"
	header "boost/xpressive/detail/static/transforms/as_marker.hpp"
	header "boost/xpressive/detail/static/transforms/as_set.hpp"
	header "boost/xpressive/detail/static/transforms/as_matcher.hpp"
	header "boost/xpressive/detail/static/transforms/as_action.hpp"
	header "boost/xpressive/detail/static/transforms/as_quantifier.hpp"
	header "boost/xpressive/detail/static/transforms/as_sequence.hpp"
	header "boost/xpressive/detail/static/width_of.hpp"
	header "boost/xpressive/detail/static/is_pure.hpp"
	header "boost/xpressive/detail/utility/traits_utils.hpp"
	header "boost/xpressive/detail/utility/width.hpp"
	header "boost/xpressive/detail/utility/cons.hpp"
	header "boost/xpressive/detail/utility/symbols.hpp"
	header "boost/xpressive/detail/utility/dont_care.hpp"
	header "boost/xpressive/detail/utility/algorithm.hpp"
	header "boost/xpressive/detail/utility/literals.hpp"
	header "boost/xpressive/detail/utility/hash_peek_bitset.hpp"
	header "boost/xpressive/detail/utility/boyer_moore.hpp"
	header "boost/xpressive/detail/utility/any.hpp"
	header "boost/xpressive/detail/utility/never_true.hpp"
	header "boost/xpressive/detail/utility/chset/chset.hpp"
	header "boost/xpressive/detail/utility/chset/basic_chset.hpp"
	header "boost/xpressive/detail/utility/chset/range_run.hpp"
	header "boost/xpressive/detail/utility/ignore_unused.hpp"
	header "boost/xpressive/detail/utility/counted_base.hpp"
	header "boost/xpressive/detail/utility/sequence_stack.hpp"
	header "boost/xpressive/detail/utility/save_restore.hpp"
	header "boost/xpressive/detail/utility/tracking_ptr.hpp"
	header "boost/xpressive/xpressive_typeof.hpp"
	header "boost/xpressive/regex_compiler.hpp"
	header "boost/xpressive/regex_token_iterator.hpp"
	header "boost/xpressive/regex_traits.hpp"
	header "boost/xpressive/regex_error.hpp"
	header "boost/xpressive/sub_match.hpp"
	header "boost/xpressive/regex_algorithms.hpp"
	header "boost/xpressive/xpressive.hpp"
	header "boost/xpressive/regex_actions.hpp"
	header "boost/xpressive/regex_constants.hpp"
	header "boost/xpressive/match_results.hpp"
	export *
}