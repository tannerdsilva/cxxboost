module cxxboost_typeof [system] {
	header "boost/typeof/incr_registration_group.hpp"
	header "boost/typeof/template_encoding.hpp"
	header "boost/typeof/vector50.hpp"
	header "boost/typeof/constant.hpp"
	header "boost/typeof/int_encoding.hpp"
	header "boost/typeof/msvc/typeof_impl.hpp"
	header "boost/typeof/decltype.hpp"
	header "boost/typeof/native.hpp"
	header "boost/typeof/vector.hpp"
	header "boost/typeof/vector150.hpp"
	header "boost/typeof/dmc/typeof_impl.hpp"
	header "boost/typeof/std/streambuf.hpp"
	header "boost/typeof/std/iostream.hpp"
	header "boost/typeof/std/utility.hpp"
	header "boost/typeof/std/bitset.hpp"
	header "boost/typeof/std/ostream.hpp"
	header "boost/typeof/std/vector.hpp"
	header "boost/typeof/std/map.hpp"
	header "boost/typeof/std/complex.hpp"
	header "boost/typeof/std/queue.hpp"
	header "boost/typeof/std/list.hpp"
	header "boost/typeof/std/istream.hpp"
	header "boost/typeof/std/functional.hpp"
	header "boost/typeof/std/set.hpp"
	header "boost/typeof/std/valarray.hpp"
	header "boost/typeof/std/string.hpp"
	header "boost/typeof/std/deque.hpp"
	header "boost/typeof/std/stack.hpp"
	header "boost/typeof/std/memory.hpp"
	header "boost/typeof/std/iterator.hpp"
	header "boost/typeof/std/fstream.hpp"
	header "boost/typeof/std/locale.hpp"
	header "boost/typeof/std/sstream.hpp"
	header "boost/typeof/register_functions_iterate.hpp"
	header "boost/typeof/pointers_data_members.hpp"
	header "boost/typeof/detail/requires_cxx11.hpp"
	header "boost/typeof/type_encoding.hpp"
	header "boost/typeof/unsupported.hpp"
	header "boost/typeof/register_functions.hpp"
	header "boost/typeof/encode_decode_params.hpp"
	header "boost/typeof/integral_template_param.hpp"
	header "boost/typeof/vector200.hpp"
	header "boost/typeof/modifiers.hpp"
	header "boost/typeof/register_fundamental.hpp"
	header "boost/typeof/register_mem_functions.hpp"
	header "boost/typeof/typeof_impl.hpp"
	header "boost/typeof/typeof.hpp"
	header "boost/typeof/type_template_param.hpp"
	header "boost/typeof/vector100.hpp"
	header "boost/typeof/message.hpp"
	header "boost/typeof/encode_decode.hpp"
	header "boost/typeof/template_template_param.hpp"
	export *
}